---
# Metadaten / meta data
title: "Methodenbaustein Einlesen strukturierter Datensätze"
author:
  - Lukas Arnold
  - Simone Arnold
  - Florian Bagemihl
  - Matthias Baitsch
  - Marc Fehr
  - Maik Poetzsch
  - Sebastian Seipel
date: today # "2024-03-05" Jahr-Monat-Tag / year-month-day

## Spracheinstellungen / language settings
lang: de
language:
  de:
    crossref-imp-title: "Definition"
    crossref-imp-prefix: "Definition"
    crossref-lst-title: "Code-Block"
    crossref-lst-prefix: "Code-Block"
    crossref-nte-title: "Beispiel"
    crossref-nte-prefix: "Beispiel"
    crossref-tip-title: "Tipp"
    crossref-tip-prefix: "Tipp"
    crossref-wrn-title: "Hinweis"
    crossref-wrn-prefix: "Hinweis"

## Formatoption / formating options
format:
  html:
    default-image-extension: svg
    code-copy: true # hover is default
#  pdf:
#    cite-method: biblatex
#    biblio-title: Quellen
#    default-image-extension: pdf # Vektorgrafiken werden als PDF eingebunden / vector grafics are embedded as PDF
execute:
  cache: false # remove when document is finished as cache: true can cause issues from time to time

## Inhaltsverzeichnis / table of contents
toc: true
number-sections: true
number-depth: 2

## Bibliographie / bibliography
bibliography: bibliography.bib
biblio-style: authoryear

## Objekteinstellungen / object options
cap-location: bottom
fig-align: center

### Grafiken von R oder Matplotlib / Figures from R or Matplotlib
# Empfehlung von / suggestion from https://r4ds.hadley.nz/quarto#sec-figures
# fig-width: 6
# fig-asp: 0.618
---

::: {.border #Lizenz}

:::: {layout="[20, 80]"}
![](skript/00-bilder/CC-BY.svg){fig-alt="Symbol des Lizenzhinweises Creative Commons BY"}

Bausteine Computergestützter Datenanalyse von Lukas Arnold, Simone Arnold, Florian Bagemihl, Matthias Baitsch, Marc Fehr, Maik Poetzsch und Sebastian Seipel. Methodenbaustein Einlesen strukturierter Datensätze von Maik Poetzsch ist lizensiert unter [CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.de). Das Werk ist abrufbar auf [GitHub](https://github.com/bausteine-der-datenanalyse/m-Einlesen-strukturierter-Datens-tze). Ausgenommen von der Lizenz sind alle Logos und anders gekennzeichneten Inhalte. 2024

::::

Zitiervorschlag

Arnold, Lukas, Simone Arnold, Matthias Baitsch, Marc Fehr, Maik Poetzsch, und Sebastian Seipel. 2024. „Bausteine Computergestützter Datenanalyse. Methodenbaustein Einlesen strukturierter Datensätze“. <https://github.com/bausteine-der-datenanalyse/m-Einlesen-strukturierter-Datens-tze>.

BibTeX-Vorlage

```
@misc{BCD-m-einlesen-strukturierter-datensätze-2024,
 title={Bausteine Computergestützter Datenanalyse. Methodenbaustein Einlesen strukturierter Datensätze},
 author={Arnold, Lukas and Arnold, Simone and Baitsch, Matthias and Fehr, Marc and Poetzsch, Maik and Seipel, Sebastian},
 year={2024},
 url={https://github.com/bausteine-der-datenanalyse/m-Einlesen-strukturierter-Datens-tze}} 
```

:::

{{< pagebreak >}}

{{< include _voraussetzungen.md >}}

{{< include _lernziele.md >}}

# Einleitung

2016 stellte eine Studie fest, dass ein Fünftel aller wissenschaftlichen Artikel im Bereich der Genetik auf der Grundlage von durch die Tabellenkalkulation Excel verfälschten Daten durchgeführt wurde [@Ziemann-2016]. Genbezeichnungen wie "MARCH1" wurden fälschlicherweise in ein Datumsformat umgewandelt. 2021 wurde diese Schätzung des Anteils betroffener Arbeiten sogar auf 30 Prozent angehoben. ([heise online](https://www.heise.de/news/Excel-wandelt-Genbezeichnungen-in-Datumsangaben-um-Problem-groesser-als-gedacht-6165902.html))

Am Beginn der computergestützten Datenanalyse steht das Einlesen von Daten aus Dateien. In der Praxis ist das Einlesen von Daten alles andere als trivial. Daten werden in einer Vielzahl von Dateiformaten gespeichert. Deshalb ist es in der Datenanalyse erforderlich, mit verschiedenen Dateiformaten umgehen zu können: mit wenigen Kilobyte großen Textdateien, offenen und proprietären Formaten gängiger Büroanwendungen und mehreren hundert Megabyte großen Dateien in speziell für den Austausch wissenschaftlicher Daten entwickelten Formaten. Programmiersprachen wie Python und R bringen verschiedene Werkzeuge zum Lesen, Bearbeiten und Speichern von verschiedenen Dateiformaten mit. Spezialisierte Pakete ergänzen den Werkzeugkasten.

Die praktischen Herausforderungen der Datenanalyse beschränken sich jedoch nicht nur auf technische Aspekte. Oftmals bereitet der innere Aufbau von Datensätzen die größten Schwierigkeiten. Ein wichtiger Bestandteil des Einlesens strukturierter Datensätze besteht darin, Fehler im Datensatz zu suchen und ggf. zu bereinigen. Dasu und Johnson schreiben: 

::: {.border layout="[5, 90, 5]"}

&nbsp;

"Unfortunately, the data set is usually dirty, composed of many tables, and has unknown properties. Before any results can be produced, the data must be cleaned and explored—often a long and
difficult task. [...] In our experience, the tasks of exploratory data mining and data cleaning constitute 80% of the effort that determines 80% of the value of the ultimate data
mining results." (@Dasu-Johnson-2003, S. ix)

&nbsp;

:::

&nbsp;

Das Einlesen strukturierter Datensätze umfasst somit den gesamten Prozess des technischen Zugriffs auf Dateien, der Organisation, Fehlersuche und -korrektur sowie des Abspeicherns der Daten in einer für die weitere Bearbeitung geeigneten Form.

In der praktischen Datenanalyse helfen zwei einfache Tipps beim Einlesen strukturierter Datensätze:

::: {#tip-editor .callout-tip collapse="false"}
**Schauen Sie sich Ihre Daten an, bevor Sie diese mit Python einlesen!** Dafür reicht ein Texteditor oder ein Tabellenkalkulationsprogramm. Ein kurzer Blick genügt, um die verwendeten Zeichentrenner, Tausendertrennzeichen, Datumsformate, die Kodierung fehlender Werte und die Unicode-Kodierung (wie UTF-8) zu identifizieren.
:::
  
Dies ist aber nicht immer möglich, beispielsweise wenn Ihr Datensatz aus hunderten Spalten und zehntausenden Zeilen besteht. Dieser Baustein vermittelt deshalb die Handwerkszeuge, um Datensätze ausschließlich mit den in Python verfügbaren Mitteln einzulesen.

Es ist nicht erforderlich, die Besonderheiten aller hier vorgestellten Pakete und Funktionen auswendig zu beherrschen. Dafür ist das Themenfeld zu komplex und nicht selten ändert sich das Verhalten von Funktionen mit der Weiterentwicklung der Programmiersprache. Die hier vorgestellten Besonderheiten von Funktionen dienen jedoch als mentale Ankerpunkte, die als Anknüpfungspunkt dienen sollen, wenn Sie in der Praxis auf Probleme stoßen.

::: {#tip-dokumentation .callout-tip collapse="false"}
**Benutzen Sie die Dokumentation!** Auf diese Weise erhalten Sie einen vollständigen Überblick über standardmäßig gesetzte und optional verfügbare Parameter. Außerdem erkennen Sie Änderungen in der Programmausführung und vermeiden so unerwartete Fehler.

:::: {layout="[1, 1]"}

![Neuerung in Python](skript/00-bilder/added-in-pyhton.png){fig-alt="Hinweis auf eine Neuerung in Python"}

![Abkündigung in Python](skript/00-bilder/deprecated-in-python.png){fig-alt="Hinweis auf eine Abkündigung in Python"}

::::

:::

# Grundlagen: Merkmale von Datensätzen
Bevor wir uns mit den praktischen Herausforderungen des Einlesens strukturierter Datensätze beschäftigten, werden zunächst einige Merkmale von Datensätzen behandelt, um ein grundlegendes Verständnis der Begrifflichkeiten zu schaffen und den Umgang der in der Basis von Python enthaltenen Werkzeuge zu vermitteln.

::: {#imp-Datensatz .callout-important}
## Datensatz

Ein Datensatz ist eine Sammlung zusammengehöriger Daten. Datensätze enthalten einer oder mehreren Variablen zugeordnete Werte. Jeder Datensatz besitzt ein technisches Format, eine Struktur, mindestens eine Variable und mindestens einen Wert.

:::

## Technisches Format
Das technische Format eines Datensatzes gibt vor, mit welchen Mitteln Daten eingelesen, bearbeitet und gespeichert werden können. Einige Beispiele sind:

  - Druckerzeugnis, z. B. Telefonbuch: manuelles Ablesen von Name und Telefonnummer, irreversible Bearbeitung per Stift
  
  - Lochkarte, z. B. Parkschein: Lesegerät erkennt Lochung und gewährt eine Freistunde, irreversible Bearbeitung mit Stanzgerät
  
  - Textdatei, z. B. Einwohnerzahl nach Bundesländern: Kann mit einer Vielzahl von Computerprogrammen wie Texteditor, Tabellenkalkulationsprogramm oder Programmierumgebung eingelesen, bearbeitet und gespeichert werden.
  
  - Hierarchical Data Format HDF5, z. B. räumliche Daten zur Blitzdichte: benötigt spezialisierte Programme oder Pakete

## Struktur
Datensätze speichern Daten in einer definierten n-dimensionalen Struktur.

::: {.border}
![n-dimensionale Datensätze](skript/00-bilder/slicing_mf_mp.png){fig-alt="Dargestellt sind von links nach rechts ein-, zwei- und dreidimensionale Blockstrukturen, die Datensätze repräsentieren. Die Teilgrafiken werden in den folgenden Abschnitten wiederverwendet und dabei auch näher beschrieben."}

slicing von Marc Fehr ist lizensiert unter [CC-BY-4.0](https://github.com/bausteine-der-datenanalyse/w-python-numpy-grundlagen#CC-BY-4.0-1-ov-file) und abrufbar auf [GitHub](https://github.com/bausteine-der-datenanalyse/w-python-numpy-grundlagen). 2024
:::

### Eindimensionale Datensätze
Die einfachste Form sind eindimensionale Datensätze, die Werte einer einzigen Variablen zuordnen. Eindimensionale Datensätze mit Werten des gleichen Typs (bspw. Zahlen) werden **Vektor** genannt. Eindimensionale Datensätze, die unterschiedliche Datentypen enthalten können, heißen **Liste**. Eindimensionale Datensätze verfügen lediglich über eine Achse: den Index, über den Elemente angesprochen werden können.

::: {.border}

![eindimensionale Datensätze](skript/00-bilder/eindimensionaler-datensatz-slicing-mf-mp.png){width="50%" fig-alt="Dargestellt ist ein in fünf Blöcke unterteilter Streifen, der einen eindimensionalen Datensatz repräsentiert. Die Blöcke sind entlang der 0. Achse von links nach rechts mit 0 bis 4 beschriftet. Von Block Null aus geht ein blauer Pfeil zu Block drei, der blau markiert ist."}

slicing von Marc Fehr ist lizensiert unter [CC-BY-4.0](https://github.com/bausteine-der-datenanalyse/w-python-numpy-grundlagen#CC-BY-4.0-1-ov-file) und abrufbar auf [GitHub](https://github.com/bausteine-der-datenanalyse/w-python-numpy-grundlagen). Die Grafik wurde auf den gezeigten Teil beschnitten und die obenstehende Beschriftung entfernt. 2024
:::

&nbsp;

Beispiele eindimensionaler Datensätze sind ein Einkaufszettel oder die Urliste eines Würfelexperiments. Über den Index kann beispielsweise das Würfelergebnis an der Indexposition 2 ausgegeben werden.

``` {python}
print( *( Augen := [6, 2, 1, 2] ) )

print(f"Das Würfelergebnis an Indexposition 2 lautet: {Augen[2]}")
```


### Eindimensionale Daten einlesen mit Python
Maya und Hans haben je sechs Mal einen Würfel geworfen und ihre Wurfergebnisse in einer .txt-Datei protokolliert. Wir wollen mit die Dateien mit Python auswerten, um zu bestimmen, wer von beiden in Summe die höchste Augenzahl erreicht hat.

| Daten | Dateiname |
|---|------|
| Würfelergebnisse Maya | dice-maya.txt |
| Würfelergebnisse Hans | dice-hans.txt|

&nbsp;

{{< include _dateien-einlesen-mit-python.md >}}

### Zweidimensionale Datensätze
Zweidimensionale Datensätze organisieren Werte in einer aus Zeilen und Spalten bestehenden **Matrix** oder einem **Dataframe**. Eine Matrix enthält nur einen Datentyp (bspw. Zahlen), ein Dataframe kann unterschiedliche Datentypen enthalten (bspw. Zahlen und Wahrheitswerte). In Python stellt das Modul Pandas die DataFrame-Struktur bereit. **[hier Querverweis auf w-Pandas]** 

::: {.border}
![zweidimensionaler Datensatz](skript/00-bilder/zweidimensionaler-datensatz-slicing-mf-mp.png){width="45%" fig-alt="Dargestellt ist ein zweidimensionaler Block, der einen zweidimensionalen Datensatz repräsentiert. Pfeile repräsentieren die zwei Achsen. Die nullte Achse entspricht der Länge (von oben nach unten) und die erste Achse der Breite des Datensatzes."}

slicing von Marc Fehr ist lizensiert unter [CC-BY-4.0](https://github.com/bausteine-der-datenanalyse/w-python-numpy-grundlagen#CC-BY-4.0-1-ov-file) und abrufbar auf [GitHub](https://github.com/bausteine-der-datenanalyse/w-python-numpy-grundlagen). Die Grafik wurde auf den gezeigten Teil beschnitten und die obenstehende Beschriftung entfernt. 2024
:::

&nbsp;

Typischerweise entspricht in zweidimensionalen Datensätzen jede Spalte einer **Variablen** und jede Zeile einer **Beobachtung**. Variablen speichern alle Werte eines Merkmals, zum Beispiel des Würfelergebnisses. Beobachtungen speichern alle Werte, die für eine Beobachtungseinheit gemessen wurden, z. B. für eine Person. [@Wickham-2014, S. 3]

``` {python}
import pandas as pd

messung1 = pd.DataFrame({'Name': ['Hans', 'Elke', 'Jean', 'Maya'], 'Geburtstag': ['26.02.', '14.03.', '30.12.', '07.09.'], 'Würfelfarbe': ['rosa', 'rosa', 'blau', 'gelb'], 'Summe Augen': [17, 12, 8, 23]})

messung1
```

&nbsp;

Über die Angabe der Indizes entlang der 0. (Zeilen) und der 1. Achse (Spalten) kann die Summe der gewürfelten Augen einer Person ausgegeben werden. 

``` {python}

print(f"Jean würfelte {messung1.iloc[2, 3]} Augen")
```

Es ist aber auch möglich, zunächst eine Spalte auszuwählen und dann wie bei einem eindimensionalen Datensatz den Wert an einer Indexposition aufzurufen. Dies wird verkettete Indexierung genannt.

``` {python}

print(f"Jean würfelte {messung1['Summe Augen'][2]} Augen")
```

::: {#wrn-chainedassignment .callout-warning}
## Verkettete Indexierung

Die verkettete Indexierung erzeugt in Pandas abhängig vom Kontext eine Kopie des Objekts oder greift auf den Speicherbereich des Objekts zu. Mit Pandas 3.0 wird die verkettete Indexierung nicht mehr unterstützt, das Anlegen einer Kopie zum Standard werden. Weitere Informationen erhalten Sie im zitierten Link.

:::: {.border layout="[5, 90, 5]"}

&nbsp;

"Whether a copy or a reference is returned for a setting operation, may depend on the context. This is sometimes called `chained assignment` and should be avoided. See [Returning a View versus Copy](https://pandas.pydata.org/docs/user_guide/indexing.html#indexing-view-versus-copy)."

&nbsp;

::::

([Pandas Dokumentation](https://pandas.pydata.org/docs/user_guide/indexing.html))
:::

### long- und wide-Format
Zweidimensionale Datensätze werden zumeist in einer aus Zeilen und Spalten bestehenden Matrix dargestellt. Den zeilenweise eingetragenen Beobachtungen werden Werte für die in den Spalten organisierten Variablen zugeordnet. Diese Art Daten darzustellen, wird wide-Format genannt: Mit jeder zusätzlich gemessenen Variablen wird der Datensatz breiter.

Eine andere Art Daten zu organisieren und über Daten nachzudenken, ist die Darstellung im long-Format. Einige Programme und Pakete erfordern Daten im long-Format oder profitieren zumindest davon beispielsweise bei der Erstellung von Grafiken. Schauen wir uns zunächst noch einmal den Datensatz messung1 im wide-Format an. Welche Beobachtungseinheiten gibt es? Welche Variablen wurden erhoben?

``` {python}
#| echo: false

messung1
```

&nbsp;

Vermutlich werden Sie davon ausgehen, dass die Beobachtungseinheiten Hans, Elke, Jean und Maya sind und die Variablen Geburtstag, Würfelfarbe und Summe Augen. Es ist aber auch denkbar, dass die Beobachtungseinheit Person mit 0, 1, 2 und 3 kodiert wurde (dem Zeilenindex des Datensatzes) und die Spalte Name ebenfalls eine der erhobenen Variablen ist. Ebenso könnte es nur zwei Variablen, Würfelfarbe und Summe Augen, geben, während die Spalten Name und Geburtstag die beobachteten Personen kodieren. Stellen Sie sich vor, es gäbe eine zweite Person mit dem Namen Hans. Dann könnten die Würfelergebnisse der Personen mit dem Namen Hans nur über den Geburtstag am 26.02. oder 11.11. korrekt zugeordnet werden.

``` {python}
messung1 = pd.DataFrame({'Name': ['Hans', 'Elke', 'Jean', 'Maya', 'Hans'], 'Geburtstag': ['26.02.', '14.03.', '30.12.', '07.09.', '11.11.'], 'Würfelfarbe': ['rosa', 'rosa', 'blau', 'gelb', 'rosa'], 'Summe Augen': [12, 17, 8, 23, 7]})

messung1
```

&nbsp;

Das long-Format macht diese Überlegungen explizit, indem identifizierende Variablen (identification variables, kurz: id vars) und gemessene Variablen (measure variables oder value vars) unterschieden werden. Die Transformation eines Datensatzes aus dem wide-Format ins long-Format wird melting (schmelzen) genannt. Das Modul Pandas bietet die Funktion `pd.melt(frame, id_vars = None)`. Diese erwartet einen DataFrame. Im optionalen Argument `id_vars` wird angegeben, welche Spalten die identifizierenden Variablen sind.

``` {python}

messung1_long = pd.melt(messung1, id_vars = ['Name', 'Geburtstag'])

messung1_long
```

&nbsp;

Im long-Format werden die gemessenen Variablen in der Spalte variable aufgeführt und deren Wert in der Spalte value eingetragen. Mit jeder zusätzlich erhobenen Variablen wird der Datensatz länger.

Wenn Sie die Unterscheidung von identifizierenden und gemessenen Variablen zu Ende denken, kann der Variablenname selbst als eine identifizierende Variable für den Wert in der Spalte value aufgefasst werden. Ein Datensatz kann als eine Struktur verstanden werden, die genau eine gemessene Variable, nämlich value, und eine Anzahl identifizierender Variablen besitzt. Dies kann im long-Format wie folgt dargestellt werden.

``` {python}
#| output: false

messung1_all_id = pd.melt(messung1, id_vars = ['Name', 'Geburtstag', 'Würfelfarbe'])

messung1_all_id

```

In dieser Darstellung wird beispielsweise der erste Wert 12 durch Name = Hans, Geburtstag = 26.02., Würfelfarbe = rosa und variable = Summe Augen identifiziert.


::: {layout="[70, 30]"}
``` {python}
#| echo: false

messung1_all_id = pd.melt(messung1, id_vars = ['Name', 'Geburtstag', 'Würfelfarbe'])

messung1_all_id

```

![](skript/00-bilder/5f489ffabc91dec1ec2192dc4e993e00.jpg){width="90%"} 

<!-- wow kommt wieder weg ;-) -->

::: 

**Was passiert, wenn auch die Variable `Summe Augen` dem Argument `id_vars` übergeben wird?**

::: {#tip-Antwort-all-id .callout-tip collapse="true"}
## Antwort

Der Befehl `messung1_all_id = pd.melt(messung1, id_vars = ['Name', 'Geburtstag', 'Würfelfarbe', 'Summe Augen'])` produziert einen leeren Dataframe, weil keine gemessenen Werte verbleiben.
:::

Auch der umgekehrte Fall ist möglich: Werden beim melting keine id_vars angegeben, werden alle Spalten als gemessene Variablen behandelt.

``` {python}

messung1_no_id = pd.melt(messung1)

messung1_no_id

```

&nbsp;

Die Umkehroperation zum melting wird casting (gießen) oder pivoting (schwenken) genannt. Dabei wird ein im long-Format vorliegender Datensatz in das wide-Format konvertiert. Die Pandas Funktion `pd.pivot(data, columns, index)` nimmt einen melted DataFrame entgegen und konveriert diesen aus den einzigartigen Werten in columns (= Spaltennamen des DataFrame im wide-Format) und den einzigartigen Werten in index (= Zeilenindex des DataFrame im wide-Format). Wird der Funktion keine Spalte für index übergeben, wird der bestehende Index des melted DataFrame verwendet (der mit 20 Zeilen natürlich viel zu lang ist.) Da das Objekt messung1_no_id keine geeignete Indexspalte besitzt, muss diese vor dem casting erzeugt werden. Dies ist mit der Methode `messung1_no_id.groupby('variable').cumcount()` möglich, die die Anzahl jeder Ausprägung in der übergebenen Spalte bei 0 beginnend durchzählt. (Ein direktes Ersetzen des Index ist auf diese Weise nicht möglich, da der Index des an `pd.pivot(data, columns, index)` übergebenen DataFrames keine Doppelungen enthalten darf.)

``` {python}
# pd.pivot() benötigt einen Index oder benutzt den bestehenden Index, des melted_df, der zu lang ist
# Deshalb eine zusätzliche Spalte in messung1_no_id einfügen
## einfach: messung1_no_id['new_index'] = list(range(0, 5)) * 4 
## allgemein: messung1_no_id['new_index'] = messung1_no_id.groupby('variable').cumcount()

# Spalte new_index einfügen
messung1_no_id['new_index'] = messung1_no_id.groupby('variable').cumcount()
print (f"Der Datensatz im long-Format mit zusätzlicher Spalte new_index:\n{messung1_no_id}")

# casting
messung1_cast = pd.pivot(messung1_no_id, index = 'new_index', columns = 'variable', values = 'value')
print(f"\nDer Datensatz im wide-Format:\n{messung1_cast}")
```

Das Ergebnis entspricht noch nicht dem ursprünglichen Datensatz im wide-Format. Um das Ausgangsformat wiederherzustellen, müssen die Spalten in die ursprüngliche Reihenfolge gebracht sowie der Index und dessen Beschriftung zurückgesetzt werden.

```{python}

# Spalten anordnen, Index zurücksetzen
messung1_cast = messung1_cast[['Name', 'Geburtstag', 'Würfelfarbe', 'Summe Augen']]
messung1_cast.reset_index(drop = True, inplace = True)
messung1_cast.rename_axis(None, axis = 1, inplace = True)

print(f"\nDer Datensatz im wide-Format mit zurückgesetztem Index:\n\n{messung1_cast}")

```

::: {#tip-idvars .callout-tip collapse="false"}
## identifizierende und gemessene Variablen

Auch wenn Sie mit Datensätzen im wide-Format arbeiten, ist die Unterscheidung identifizierender und gemessener Variablen nützlich, um Datensätze zu organisieren. [siehe @sec-tidydata]

:::

### Übung zweidimensionale Datensätze
Oben wurde das Objekt messung1_long mit dem Befehl `messung1_long = pd.melt(messung1, id_vars = ['Name', 'Geburtstag'])` angelegt.  
**Benutzen Sie die Funktion** `df.cast()`, **um den Datensatz messung1 wieder ins wide-Format zu transformieren.**

``` {python}
#| echo: false

messung1_long
```


::: {#tip-pivoting .callout-tip collapse="true"}
## Musterlösung zweidimensionale Datensätze

``` {python}

# Spalte new_index einfügen
messung1_long['new_index'] = messung1_long.groupby('variable').cumcount()

# casting
messung1_long_cast = pd.pivot(messung1_long, index = 'new_index', columns = 'variable', values = 'value')

# Spalten anordnen, Index zurücksetzen
messung1_long_cast = messung1_cast[['Name', 'Geburtstag', 'Würfelfarbe', 'Summe Augen']]
messung1_long_cast.reset_index(drop = True, inplace = True)
messung1_long_cast.rename_axis(None, axis = 1, inplace = True)

messung1_long_cast

```


:::

### Drei- und mehrdimensionale Datensätze
Drei- oder mehrdimensionale Datensätze organisieren komplexe Datenstrukturen in sogenannten **Arrays**. Arrays sind n-dimensionale Datenstrukturen und damit zugleich ein Oberbegriff. So ist eine Liste ein eindimensionales Array, eine Matrix ein zweidimensionales Array und eine Excel-Datei mit mehreren Arbeitsblättern für jährlich erhobene Umfragedaten ein 3-dimensionales Array (Arbeitsblätter, Zeilen, Spalten). Abhängig vom verwendeten Modul können Arrays ein oder mehrere Datentypen enthalten. **ggf. ergänzen: Modul xarray <https://docs.xarray.dev/en/stable/user-guide/pandas.html>**

::: {.border}
![dreidimensionale Datensätze](skript/00-bilder/dreidimensionaler-datensatz-slicing-mf-mp.png){width="50%" fig-alt="Dargestellt ist ein dreidimensionaler Block, der einen dreidimensionalen Datensatz repräsentiert. Pfeile repräsentieren die drei Achsen. Die nullte Achse entspricht der Tiefe, die erste Achse der Länge (von oben nach unten) und die zweite Achse der Breite des Datensatzes."}

slicing von Marc Fehr ist lizensiert unter [CC-BY-4.0](https://github.com/bausteine-der-datenanalyse/w-python-numpy-grundlagen#CC-BY-4.0-1-ov-file) und abrufbar auf [GitHub](https://github.com/bausteine-der-datenanalyse/w-python-numpy-grundlagen). Die Grafik wurde auf den gezeigten Teil beschnitten und die obenstehende Beschriftung entfernt. 2024

:::

&nbsp;

Für drei- und mehrdimensionale Datenstrukturen werden häufig spezialisierte Datenformate verwendet, die im Abschnitt @sec-spezialformate behandelt werden. Dies hat unter anderem den Grund, dass so leichter verschiedene Datentypen verarbeitet und mit Metadaten (siehe @sec-metadaten) dokumentiert werden können.

**optional: Exkurs JSON <https://docs.python.org/3/tutorial/inputoutput.html>**

### Bilddaten einlesen

::: {.border}
Digitale Bilder liegen in Form eines dreidimensionalen Datensatzes vor. In Zeilen und Spalten liegen für jeden Pixel Farbwerte (Rot, Grün, Blau) und gegebenenfalls ein Alphawert vor (Rot, Grün, Blau, Alpha). Die Farbwerte liegen entweder im Bereich von 0 bis 1 oder von 0 bis 255 (8-Bit).

```
# Farbwerte für einen Pixel
[Rotwert, Grünwert, Blauwert]

# Eine Bildzeile mit drei Pixeln
[[Rotwert, Grünwert, Blauwert], [Rotwert, Grünwert, Blauwert], [Rotwert, Grünwert, Blauwert]]

# Ein Bild aus drei Zeilen und Spalten
[[[Rotwert, Grünwert, Blauwert], [Rotwert, Grünwert, Blauwert], [Rotwert, Grünwert, Blauwert]],
[[Rotwert, Grünwert, Blauwert], [Rotwert, Grünwert, Blauwert], [Rotwert, Grünwert, Blauwert]],
[[Rotwert, Grünwert, Blauwert], [Rotwert, Grünwert, Blauwert], [Rotwert, Grünwert, Blauwert]]]
```

Bilddateien können mit der Funktion `plt.imread()` aus dem Modul `matplotlib.pyplot` eingelesen werden. 

:::: {.border}
``` {python}
import matplotlib.pyplot as plt

logo = plt.imread(fname = 'skript/00-bilder/python-logo-and-wordmark-cc0-tm.png')

plt.imshow(logo)

```

Python Logo von Python Software Foundation steht unter der [GPLv3](https://www.gnu.org/licenses/gpl-3.0.html). Die Wort-Bild-Marke ist markenrechtlich geschützt: <https://www.python.org/psf/trademarks/>. Das Werk ist abrufbar auf [wikimedia](https://de.m.wikipedia.org/wiki/Datei:Python_logo_and_wordmark.svg). 2008

:::: 

&nbsp;

Die Struktur des Datensatzes kann mit dem Attribut `.shape` abgerufen werden.

``` {python}
print(type(logo), "\n")

print(logo.shape)

```

Die Daten wurden als NumPy.ndarray eingelesen. Das Logo hat 144 Zeilen, 486 Spalten und liegt im RGBA-Farbraum vor. Ein Ausschnitt der Daten sieht so aus:

``` {python}
print(logo[50:52, 50:52, : ])

```

### Übung dreidimensionale Datensätze
Über den Index der dritten Dimension können die Farbkanäle Rot, Grün und Blau ausgewählt und mit der Funktion `plt.imshow(cmap = 'Greys_r')` einzeln dargestellt werden. Das Argument `cmap = 'Greys_r'` weist die Funktion an, die invertierte Grauskala benutzen. Dadurch werden hohe Farbwerte hell und niedrige Farbwerte dunkel dargestellt. **Versuchen Sie es einmal.**

:::: {#tip-logo .callout-tip collapse="true"}
## Musterlösung dreidimensionale Datensätze
``` {python}
#| fig-cap: Farbkanäle des Pythonlogos
#| fig-alt: "Dargestellt sind die drei Farbkanäle des Pythonlogos."

kanal = ["Rotkanal", "Grünkanal", "Blaukanal"]

plt.figure(figsize = (9, 6))

for i in range(3):

  plt.subplot(1, 4, i + 1)
  plt.imshow(logo[ :, :, i], cmap = 'Greys_r')
  plt.title(label = kanal[i])

plt.colorbar(shrink = 0.15)

plt.tight_layout()
plt.show()

```

Möglicherweise wundern Sie sich, warum der Bildhintergrund in jedem Farbkanal schwarz ist. Die Ursache finden Sie im nächsten Tipp.

::::: {#tip-logo .callout-tip collapse="true"}
## Erklärung Bildhintergrund
Der Bildhintergrund hat in allen Kanälen, auch im Alphakanal, den Farbwert 0. Dieser Teil des Bildes ist deshalb vollständig transparent und wird vom Hintergrund der Internetseite ausgefüllt. Der Bildhintergrund des Logos wirkt deshalb weiß.

``` {python}
#| fig-cap: Alphakanal des Pythonlogos
#| fig-alt: "Dargestellt ist der Alphakanal des Pythonlogos. Der Bildhintergrund hat den Farbwert 0."

# Alphakanal
plt.imshow(logo[ :, :, 3], cmap = 'Greys_r')
plt.title(label = 'Alphakanal')
plt.colorbar(shrink = 0.4)

plt.show()

# Die ersten zwei Zeilen und Spalten des Logos
print(logo[0:2, 0:2, : ])
```

:::::
::::

[@Arnold-2023-numpy-dateien]

:::

## Datentyp {#sec-datentyp}
Der Datentyp gibt an, wie die in einem Datensatz einhaltenen Werte von Python interpretiert werden sollen. Beispielsweise kann der Wert "1" ein Zeichen, eine Ganzzahl, einen Wahrheitswert, den Monat Januar oder die Ausprägung einer kategorialen Variablen repräsentieren. Python unterstützt als vielseitig einsetzbare Programmiersprache zahlreiche Datentypen, die den Kategorien: numerics, sequences, mappings, classes, instances and exceptions zugeordnet sind. Nähere Informationen dazu finden Sie in der [Dokumentation](https://docs.python.org/3/library/stdtypes.html).

::: {.border}
![Datentypen in Python](skript/00-bilder/python3-standard-type-hierarchy.png){width="60%" fig-alt="Dargestellt ist eine Kategorisierung der Standardtypen in Python. Die Kategorisierung ist nicht vollständig deckungsgleich zu den in der Dokumentation genannten Kategorien von Datentypen. Der Typ None für Nullwerte hat keine weitere Unterteilung. Die Kategorie Numbers unterteilt sich in Zahlenwerte (Ganzzahlen, boolsche Wahrheitswerte), reele Zahlen (floats) und komplexe Zahlen. Die Kategorie Sequences unterteilt sich in Unveränderliche (Strings, Tuple, Bytes) und Veränderliche (Listen, Byte Arrays). Die Kategorie Set Types unterteilt sich in Sets (Mengen) und Frozen Sets. Die Kategorie Mappings enthält Dictionaries (Wörterbücher). Die Kategorie Callable umfasst FUnktionen, Methoden und Klassen. Außerdem gibt es die Kategorie Module."}

Python 3. The standard type hierarchy. von Максим Пе ist lizensiert unter [CC BY SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/deed.de) und abrufbar auf [wikimedia](https://commons.wikimedia.org/wiki/File:Python_3._The_standard_type_hierarchy.png). 2018
:::

&nbsp;

Durch Module werden weitere Datentypen hinzugefügt. In der Datenanalyse häufig verwendete Datentypen sind:

  - Zahlen: Ganzzahl, Fließkommazahlen

  - Wahrheitswerte

  - Zeichenketten

  - Datums- und Uhrzeitangaben

  - Kategorie<!-- Faktor in R--> (aus dem Modul [Pandas](https://pandas.pydata.org/docs/user_guide/categorical.html))

Python enthält Funktionen, um den Datentyp eines Werts zu bestimmen und ggf. umzuwandeln. Einige dieser Funktionen werden exemplarisch vorgestellt.

``` {python}
a = 67 
print(a, type(a))

b = a + 1.8
print(b, type(b), "\n")

print(f"Umwandlung in Ganzzahlen mit int(): {( a := int(a) ), (b := int(b) )} - Beachten Sie das Abschneiden der Nachkommastelle.\n")

print(f"Umwandlung in ASCII-Zeichen mit chr(): {( a := chr(a) ), ( b := chr(b) )}\n")

print(f"Umwandlung in eine ASCII-Zahl mit ord(): {( a := ord(a) ), ( b := ord(b) )}\n")

print(f"Umwandlung in Fließkommazahlen mit float(): {( a := float(a) ), ( b := float(b) )}\n")

print(f"Umwandlung in Zeichen mit str(): {( a := str(a) ), ( b:= str(b) )}\n")

print(f"Umwandlung in Wahrheitswerte mit bool(): {bool(a), bool(b)}")

``` 

Der Datentyp bestimmt zum einen den zulässigen Wertebereich einer Variablen. Beispielsweise sind 0 und 13 zulässige Ganzzahlen, aber keine gültigen Kodierungen des Monats. Zum anderen definiert der Datentyp, welche Operationen mit den Werten zulässig sind und wie diese von Python ausgeführt werden. Dies betrifft Operatoren und Funktionen.

::: {#nte-operation-nach-datentyp .callout-note}
# Datentypabhängige Operationen und Funktionen

``` {python}
# Der Operator + bewirkt die Addition von Zahlen
print(1 + 13)

# Der Operator + bewirkt auch das Verketten von strings
print(str(1) + str(13))

```

Die Sortierfunktion arbeitet abhängig vom Datentyp.
``` {python}

# Liste von Monatskürzeln erstellen
dates = pd.Series([ '07.06.2000', '12.01.2000', '11.02.2000', '04.09.2000', '10.03.2000', '03.10.2000', '09.04.2000', '08.05.2000', '06.07.2000', '05.08.2000', '02.11.2000', '01.12.2000'])
dates = pd.to_datetime(dates, format = '%d.%m.%Y');

print(f"Eine unsortierte Liste von Monatskürzeln:\n{list(dates.dt.strftime("%b"))}")

print(f"\nDie Liste alphabetisch sortiert:\n{sorted(list(dates.dt.strftime("%b")))}")

print(f"\nDie Liste als datetime-Objekt sortiert:\n{list(dates.sort_values().dt.strftime("%b"))}")

```

:::

::: {#tip-datatype .callout-tip collapse="false"}
## Datentyp kontollieren und plausibilisieren
Beim Einlesen von Datensätzen ist es wichtig, die korrekte Erkennung der Datentypen zu kontrollieren bzw. aktiv zu steuern. Weitere Methoden für die formale Prüfung des Datentyps und für die Kontrolle des Wertebereichs werden in 
[@sec-numpypandas] vorgestellt.
::: 

### Fehlende Werte {#sec-missing}
Ein besonderer Datentyp ist der zur Repräsentation fehlender Werte. In Python wird zwischen nicht existenten und nicht definierten Werten unterschieden.

#### Nullwert None
Der sogenannte Nullwert in Python ist `None`, das zu den definierten Schlüsselwörtern in Python gehört.
``` {python}
print(type(None))

```

`None` repräsentiert nicht existente Werte und Objekte. Leere (aber existente) Objekte gehören nicht zum Datentyp `None`.

``` {python}
leere_liste = []
leere_liste == None
```

`None` kann Funktionen als Argument übergeben oder von diesen als Rückgabewert ausgegeben werden. Operationen sind mit `None` jedoch nicht möglich. 
``` {python}
# Operationen mit None führen zu Fehlermeldungen
try:
  print(None + 1)
except TypeError as error:
  print("Der übergebene Wert führt zu der Fehlermeldung:\n", error)
else:
  print(None + 1)

```

Eine Ausnahme ist die Umwandlung in eine Zeichenkette.
``` {python}
# Eine Ausnahme ist die Umwandlung in strings
a = None
print("\nprint(a) gibt den Nullwert zurück:\n", a, sep = "")

print("\nstr(a) gibt eine Zeichenkette zurück:")
str(a)

```

#### NaN
Um mit fehlenden Werten innerhalb eines Datensatzes arbeiten zu können, gibt es den Wert `NaN`, der zur Klasse der Fließkommazahlen gehört. `NaN` steht für Not a Number und repräsentiert undefinierte oder nicht darstellbare Werte. Beispielsweise berechnet die Methode `pd.diff()` die Differenz jedes Werts zu seinem Vorgänger. Da der erste Wert keinen Vorgänger hat, wird `NaN` erzeugt.

``` {python}
my_series = pd.Series([1, 2, 4, 8])
my_series.diff()
```

Anders als `None` ist `NaN` kein Standardschlüsselwort in Python. Der Wert `NaN` wird erzeugt mit `float('nan')` oder `float('NaN')`, die Groß- und Kleinschreibung spielt keine Rolle. `NaN` hat also den Datentyp Fließkommazahl. Die Module math und NumPy bieten mit `math.nan` und `np.nan` ebenfalls Funktionen, um `NaN` zu erzeugen.

``` {python}
print(type(float('NaN')))

```

Mit dem Wert 'NaN' können Operationen ausgeführt werden. Das Ergebnis ist immer `NaN`.
``` {python}
print(float('NaN') + 1)
```

Einige Funktionen können mit `NaN` als Platzhalter für fehlende Werte umgehen.
``` {python}
# Python-Basis
print("sum():", sum([1, 2, float('NaN'), 4]), "\n")
print("max():", max([1, 2, float('NaN'), 4]), "\n")
print("any():", any([1, 2, float('NaN'), 4]), "\n")

# Pandas
daten_mit_nan = pd.Series([1, 2, float('NaN'), 4])
print(daten_mit_nan + 1)
print("\nSumme des Datensates:", daten_mit_nan.sum())
```

::: {#wrn-logicbasepython .callout-warning appearance="simple" collapse="false"}
## Achtung Logik!

Die logische Abfrage fehlender Werte unterscheidet sich für `None` und `NaN`. 

``` {python}
bool_values = [None, float('NaN')]

for element in bool_values:
  bool_value = bool(element)
  print("Wahrheitswert von", element, "ist", bool_value)
```

Dies gilt auch für die logische Identität.
``` {python}
for element in bool_values:
  result = element == element
  print("Identität von", element, "ist", result)
```

:::

### Fehlende Werte in der Praxis
`None` und `NaN` sind pythonspezifische Repräsentationen für nicht existente oder nicht definierte Werte. In der Praxis werden fehlende Werte in Datensätzen auf unterschiedliche Weise gekennzeichnet. 

In Datensätzen übliche Werte sind:

  - kein Eintrag, beispielsweise in kommaseparierten Dateien eine leere Zeichenkette `""`

  - definierte Zeichenfolge: `NA` in der Programmiersprache R, `NULL` in der Datenbanksprache SQL, `.` in der Statistik-Software Stata
  
  - (mehrere) manuell gewählte Zeichen oder Ziffern außerhalb des zulässigen Wertebereichs wie -1, -88, -99 (häufig bei Umfragedaten)

Die Art der Kennzeichnung ist jeweils mit Vor- und Nachteilen verbunden. Eine definierte Zeichenfolge für fehlende Werte hilft dabei, Lücken im Datensatz von Fehlern bei der Datenerfassung zu unterscheiden. Dazu ist eine definierte Zeichenfolge wie "NA" besser als eine leere Zeichenkette geeignet. Manuell gewählte Werte erlauben es, bei der automatischen Auswertung eines Datensatzes abhängig von der Situation ein bestimmtes Verhalten für jede Variable festzulegen (z. B. Unterscheidung von nicht zutreffend, Aussage verweigert, weiß nicht, Interview abgebrochen keine Antwort). 

::: {#tip-missingvalues .callout-tip collapse="false"}
## fehlende Werte

Die Identifizierung und ggf. Bereinigung fehlender Werte ist ein wichtiger Schritt beim Einlesen strukturierter Datensätze. Dabei hilft es, die gängigen Kennzeichnungen für fehlende Werte zu kennen und sich über die Konventionen des jeweiligen Dateiformats bzw. der jeweiligen Disziplin zu informieren. Dennoch ist manchmal ein gewisser Spürsinn unerlässlich. Geeignete Funktionen zur Identifizierung fehlender Werte werden in @sec-numpypandas vorgestellt.

:::

## Metadaten {#sec-metadaten}
Metadaten sind beschreibende Informationen eines Datensatzes. Metadaten geben beispielsweise an:

  - welche Datentypen ein Datensatz enthält,

  - verwendete Kodierschemen, Skalen oder mimimal und maximal zulässige Werte,

  - die Bedingungen, unter denen die Daten erhoben wurden,

  - Herkunft der Daten,

  - Beziehungen zwischen Variablen und Datensätzen,
  
  - urheberrechtliche Informationen und Lizenzhinweise.

(vgl. [The HDF Group Help Desk](https://docs.hdfgroup.org/archive/support/HDF5/doc/Advanced/HDF5_Metadata/index.html))

Spezialisierte Dateiformate wie netCDF oder HDF deklarieren Metadaten explizit in dafür vorgesehenen Feldern. Vielen Dateiformaten fehlt eine solche Funktion. Relevante Metadaten stehen deshalb häufig im Dateinamen (**Beispiel: SMARD-Daten**), in Spaltenbeschriftungen (**Beispiel: Zeitzone im österreichischen Strommarktdatensatz**), in zusätzlichen Tabellenblättern (**Beispiel besorgen**) oder in separaten Dokumenten (die nicht immer zur Verfügung stehen) **DWD-Daten von Jean-Luca**.

::: {#tip-metadata .callout-tip collapse="false"}
## Metadaten
Insbesondere vor dem Einlesen komplexer Datensätze sollten Begleitmaterialien, sofern vorhanden, studiert werden. 

**Hier Querverweis auf w-rechtliche Grundlagen Datenmanagement**
:::

# Die Module NumPy und Pandas {#sec-numpypandas}
Die Module NumPy und Pandas erlauben ein effizientes Arbeiten mit Datensätzen. Insbesondere das Lesen- und Schreiben von Dateien und die Verwaltung von Datentypen ist erheblich einfacher als mit der Python-Basis. Außerdem sind die vektorisierten Operationen vielfach schneller als Operationen mit Python. Das Modul Pandas basiert auf NumPy. In den folgenden Abschnitten werden beide Module behandelt.

Eine kurze Übersicht der Vor- und Nachteile:

  * NumPy: n-dimensionale Array-Struktur mit Unterstützung der am häufigsten verwendeten Datentypen sowie zahlreicher numerischer Formate für spezialisierte wissenschaftliche Berechnungen ([siehe Dokumentation](https://numpy.org/devdocs/reference/arrays.scalars.html)). Ein Array kann immer nur einen Datentyp haben und die Größe von Arrays ist unveränderlich. Dafür werden Operationen etwas schneller als in der DataFrame-Struktur von Pandas ausgeführt.  
  **Querverweis auf w-NumPy**

    - Spaltennamen sind mit einem strukturierten dtype möglich ([siehe Dokumentation](https://numpy.org/doc/stable/user/basics.io.genfromtxt.html#setting-the-names))

  * Pandas: 2-dimensionale DataFrame-Struktur im long- und wide-Format. DataFrames können mehrere Datentypen enthalten und die Größe von DataFrames ist veränderlich. Unterstützung von alphanummerischen Spalten- und Indexbeschriftungen.  
  **Querverweis auf w-Pandas**

    - dreidimensionale DataFrames sind mit einem Multiindex möglich --> das widerspricht aber dem Konzept von Tidy Data

Für beide Module haben sich diese Kürzel etabliert:

``` {python}
import numpy as np
import pandas as pd

# Deklarieren der Anzahl der Nachkommastellen
pd.set_option("display.precision", 2)
```

::: {#tip-pypandas .callout-tip collapse="false"}
## Arbeiten mit NumPy und Pandas
Ob Sie mit NumPy oder mit Pandas arbeiten, hängt von dem vorliegenden Datensatz und persönlichen Präferenzen ab. 

Das Paket Pandas erlaubt es, Daten aus verschiedenen Quellen wie CSV-Dateien oder Excel-Tabellen und mit unterschiedlichen Datentypen in einen DataFrame zu laden. Anschließend können diese mit wenigen Befehlen untersucht und umstrukturiert werden. Komplexe Operationen wie das Umformen von Datensätzen, das Gruppieren und Aggregieren von Daten sowie das Filtern und Sortieren sind effizient möglich.

Bis auf wenige Ausnahmen sind Pandas und NumPy zueinander kompatibel. Es spricht nichts dagegen, Ihre Daten mit Pandas vorzubereiten und anschließend mit NumPy auszuwerten.

:::

## Datentypen
NumPy unterstützt folgende Datentypen:

|      Datentyp NumPy-Array  |      Datentyp in Python |
|---|---|
|     int_    |     int    |
|     double    |     float    |
|     cdouble    |     complex    |
|     bytes_    |     bytes    |
|     str_    |     str    |
|     bool_    |     bool    |
|     datetime64    |     datetime.datetime    |
|     timedelta64    |     datetime.timedelta    |

[Dokumentation NumPy](https://numpy.org/devdocs/reference/arrays.scalars.html)

In den meisten Fällen verwendet das Modul Pandas die NumPy-Datentypen. Pandas führt aber auch einige zusätzliche Datentypen ein. Eine vollständige Liste finden Sie in der [Pandas Dokumentation](https://pandas.pydata.org/docs/reference/arrays.html). Die wichtigsten zusätzlichen Datentypen sind:

  - [Kategorie](https://pandas.pydata.org/docs/user_guide/categorical.html) `dtype = 'category'`

  - [Zeitzonenbewusstes Datumsformat](https://pandas.pydata.org/docs/reference/api/pandas.Timestamp.html#pandas.Timestamp) `dtype = 'datetime64[ns, US/Eastern]'`

## Dateien lesen und schreiben
In den Werkzeugbausteinen NumPy und Pandas haben Sie die Funktionen zum Lesen und Schreiben von Dateien kennengelernt.

::: {.panel-tabset}
## NumPy
In NumPy können Dateien mit der Funktion `np.loadtxt()` gelesen und mit der Funktion `np.savetxt()` geschrieben werden. 

  - `np.loadtxt(fname = data.txt, delimiter = ";", skiprows= #Reihen)`  

  - `np.savetxt(fname = dateipfad, X = daten, header = kommentar, fmt='%5.2f')`

## Pandas
In Pandas werden Dateien mit einer Reihe spezialisierter Funktionen gelesen und geschrieben, die einem einheitlichen Schema folgen. Funktionen zum Lesen von Dateien werden in der Form `pd.read_csv` und Funktionen zum Schreiben in der Form `pd.to_csv` aufgerufen.

:::: {.border}
| Format Type | Data Description | Reader | Writer |
|:---:|:---:|:---:|:---:|
| text | CSV | read_csv | to_csv |
| text | Fixed-Width Text File | read_fwf | NA |
| text | JSON | read_json | to_json |
| text | HTML | read_html | to_html |
| text | LaTeX | Styler.to_latex | NA |
| text | XML | read_xml | to_xml |
| text | Local clipboard | read_clipboard | to_clipboard |
| binary | MS Excel | read_excel | to_excel |
| binary | OpenDocument | read_excel | NA |
| binary | HDF5 Format | read_hdf | to_hdf |
| binary | Feather Format | read_feather | to_feather |
| binary | Parquet Format | read_parquet | to_parquet |
| binary | ORC Format | read_orc | to_orc |
| binary | Stata | read_stata | to_stata |
| binary | SAS | read_sas | NA |
| binary | SPSS | read_spss | NA |
| binary | Python Pickle Format | read_pickle | to_pickle |
| SQL | SQL | read_sql | to_sql |

([Pandas Dokumentation](https://pandas.pydata.org/docs/user_guide/io.html))
::::
::: 

## Datentypen erkennen und festlegen
Der Datentyp bestimmt, wie bereits ausgeführt, den zulässigen Wertebereich einer Variablen, zulässige Operationen und die Ausführung von Operatoren und Funktionen in Python. Die Module NumPy und Pandas bieten eine Reihe von Funktionen, um den Datentyp von Variablen zu kontrollieren und festzulegen. 

**ergänzen: Datumsformat Hinweis auf Zeitreihen [@sec-zeitreihen]**

### NumPy
Mit NumPy kann der Datentyp eines Arrays beim Einlesen einer Datei mit dem Argument `dtype` festgelegt werden `np.loadtxt(fname = data.txt, dtype = 'float')`. Das Argument `dtype` akzeptiert die Angabe eines Datentyps, Schlüsselwörter oder Kürzel. Weiter Informationen erhalten Sie in der [NumPy Dokumentation](https://numpy.org/doc/stable/reference/arrays.dtypes.html).

| Datentyp | Schlüsselwort | Kürzel | dtype |
|---|---|---|---|
| Fließkommazahl | float | f8 | float64 |
| Ganzzahl | int | i | int32 |
| Wahrheitswert | bool | ? | bool |
| Datum | datetime64 | M | datetime64 |
| Zeichenkette | str | U | U + Ziffer zur Angabe der benötigten Bytes |

Der Datentyp eines Arrays kann mit dem Attribut `np.dtype` bestimmt werden. Der Datentyp eines Objekts kann mit der Methode `np.array = np.array.astype()` geändert werden.


Folgende Datei ist Ihnen aus dem w-NumPy bekannt.

``` {python}
dateipfad = 'skript/01-daten/TC01.csv'
daten = np.loadtxt(dateipfad)
```

**Prüfen Sie den dtype der Datei und legen Sie eine Kopie des Objekts mit Dateityp Ganzzahl an. Wie kann überprüft werden, ob bei der Umwandlung in Ganzzahlen Nachkommastellen abgeschnitten wurden?**

::: {#tip-numpydatentyp .callout-tip collapse="true"}
## Musterlösung Datentypumwandlung

``` {python}
# Ausgabe des Datentyps
print(daten.dtype)

# Umwandlung in Ganzzahl
daten_int = daten.astype('int')

# Prüfen auf Datenverlust
prüfsumme = daten - daten_int
print(f"Differenz daten - daten_int: {prüfsumme.sum()}")

```

:::

### Pandas
Das Modul Pandas ist auf den Umgang mit unterschiedlichen Datentypen spezialisiert. Den Funktionen zum Einlesen von Daten kann mit dem Argument `dtype` der Datentyp übergeben werden. Für mehrere Spalten ist dies in Form eines Dictionaries in der Form `{'Spaltenname': 'dtype'}` möglich.  
Das Atrribut zur Ausgabe des Datentyps heißt passenderweise `pd.DataFrame.dtypes` (angefügtes s beachten). Der Datentyp eines Pandas-Datenobjekts kann analog zu NumPy mit `pd.Series = pd.Series.astype()` geändert werden.

#### Vitamin C bei Meerschweinchen
In einer Gruppe von 60 Meerschweinchen (**1. Spalte ohne Beschriftung**) wurde die Länge der zahnbildenden Zellen (Odontoblasten) in Micron gemessen (**len**). Den Tieren wurde zuvor Vitamin C in Form von Ascorbinsäure (VC) oder Orangensaft (VC) verabreicht (**supp**). Die Meerschweinchen erhielten Dosen von 0.5, 1 oder 2 Milligramm Vitamin C pro Tag  (**dose**). Die Messdaten sind in der Datei ToothGrowth.csv gespeichert (Crampton 1947.)

::: {.border}
Crampton, E. W. 1947. „THE GROWTH OF THE ODONTOBLASTS OF THE INCISOR TOOTH AS A CRITERION OF THE VITAMIN C INTAKE OF THE GUINEA PIG“. The Journal of Nutrition 33 (5): 491–504. <https://doi.org/10.1093/jn/33.5.491> 
:::

&nbsp;

 **Lesen Sie die Datei wie folgt ein:**

  - Die Spaltenbeschriftung der 1. Spalte soll mit der Beschriftung 'ID' ersetzt werden (ohne Anführungszeichen).
  
  - Die Spalten len und dose sollen mit geeigneten numerischen Datentypen, die Spalte supp als Kategorie eingelesen werden.

::: {#tip-meerschweinchen .callout-tip collapse="true"}
## Musterlösung Meerschweinchen
``` {python}
dateipfad = "skript/01-daten/ToothGrowth.csv"
meerschweinchen = pd.read_csv(filepath_or_buffer = dateipfad, sep = ',', header = 0, \
  names = ['ID', 'len', 'supp', 'dose'], dtype = {'ID': 'int', 'len': 'float', 'dose': 'float', 'supp': 'category'})

# Ausgabe jedes sechsten Werts
meerschweinchen.iloc[meerschweinchen.index % 6 == 0]
```

``` {python}
print(meerschweinchen.dtypes)
```

:::

#### Nützliche Funktionen zur Beschreibung von Datensätzen
Pandas bietet einige praktische Funktionen, um den Aufbau eines Datensatzes zu beschreiben.

Das Attribut `.columns` gibt die Spaltenbeschriftungen als Liste zurück. Ebenfalls ist darüber ein Schreibzugriff möglich.
``` {python}
print(meerschweinchen.columns)
meerschweinchen.columns = ['ID', 'Länge', 'Verabreichung', 'Dosis']
print(meerschweinchen.columns)
```

Die Methode `pd.DataFrame.describe()` erzeugt eine beschreibende Statistik für einen DataFrame. Standardmäßig werden alle numerischen Spalten berücksichtigt. Mit dem Argument `include` können die zu berücksichtigenden Spalten vorgegeben werden. `include = all` berücksichtigt alle Spalten, was nicht unbedingt sinnvoll ist. Alternativ kann eine Liste zu berücksichtigender Datentypen übergeben werden. Das Argument `exclude` schließt auf die gleiche Weise Datentypen von der Ausgabe aus.

``` {python}
print(meerschweinchen.describe(), "\n")

print(meerschweinchen.describe(include = 'all'), "\n")

print(meerschweinchen.describe(include = ['float']), "\n")
```

Die Methode `pd.DataFrame.count()` zählt alle vorhandenen Werte in jeder Spalte oder  mit `pd.DataFrame.count(axis = 'columns')` in jeder Zeile.
``` {python}
meerschweinchen.count(axis = 'rows') # der Standardwert von axis ist 'rows'
```

Die Methode `pd.DataFrame.info()` erzeugt eine Beschreibung des Datensatzes. 
``` {python}
meerschweinchen.info()
```

Die Methode `pd.unique()` listet alle einzigartigen Werte auf.
``` {python}
meerschweinchen['Dosis'].unique()
```

::: {#tip-pandasinfo .callout-tip collapse="false"}
## Nützliche Funktionen
Pandas bietet einige praktische Funktionen, um eine eingelesene Datei zu kontrollieren. Machen Sie sich die Verwendung von `pd.dtypes` oder `pd.DataFrame.info()` zur Angewohnheit. 
:::

### Aufgabe Datentypen
Das britische Energieministerium veröffentlicht Daten zu den Industriestrompreisen in den Mitgliedsändern der Internationalen Energieagentur.  
**Lesen Sie Tabellenblatt "5.3.1 (excl. taxes)" aus der Excel-Datei 'skript/01-daten/table_531.xlsx' mit Pandas ein. Stellen Sie sicher, dass alle Spalten mit einem numerischen Datentyp eingelesen werden.**

::: {.border}
Department for Energy Security & Net Zero. 2024. Energy Prices International Comparisons. Industrial electricity prices in the IEA. <https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/670121/table_531.xls>
:::

::: {#tip-taxes .callout-tip collapse="true"}
## Musterlösung 5.3.1 (excl. taxes)

Überspringen der führenden Zeilen mit dem Argument `header = 8`. Auswahl des Tabellenblatts mit `sheet_name = "5.3.1 (excl. taxes)"` und Kontrolle der erkannten Datentypen mit `taxes.dtypes` 
``` {python}
dateipfad = 'skript/01-daten/table_531.xlsx'

taxes = pd.read_excel(io = dateipfad, sheet_name = "5.3.1 (excl. taxes)", \
  header = 8)

taxes.dtypes

```

Werte in Spalte 'Republic of Türkiye' mit `pd.unique()` ansehen.
``` {python}

taxes['Republic of Türkiye'].unique()

```

Zeichenkette '..' entfernen und Datentyp mit Methode `pd.astype('float64')` ändern.

  - Variante 1: als fehlenden Wert beim Einlesen deklarieren. 
  
  - Variante 2: Nach dem Einlesen Indexposition bestimmen und Wert ersetzen.
  
    - Das verkettete Slicing `df["col"][row_indexer] = value` wird mit der Pandas Version 3.0 nicht mehr unterstützt und gibt deshalb eine Fehlermeldung aus.
    
    - Künftig ist folgende Synthax zu verwenden: `df.loc[row_indexer, "col"] = value` 

``` {python}
# Variante 1: '..' als fehlenden Wert deklarieren
# taxes = pd.read_excel(io = dateipfad, sheet_name = "5.3.1 (excl. taxes)", \
#   header = 8, na_values = ['..'])

# Variante 2: Index des Werts bestimmen und mit np.NaN überschreiben
indexposition = taxes['Republic of Türkiye'] == '..'

taxes.loc[indexposition, 'Republic of Türkiye'] = np.NaN
taxes['Republic of Türkiye'] = taxes['Republic of Türkiye'].astype('float64')

taxes.dtypes
```

:::

## Umgang mit fehlenden Werten
Eine unerwartet als string oder object eingelesene Spalte weist häufig auf fehlende Werte hin, die durch Sonderzeichen gekennzeichnet sind. Die Module NumPy und Pandas bieten Funktionen, um fehlende Werte bereits beim Einlesen zu erkennen und umzuwandeln.

### NumPy
Die NumPy-Funktion `np.loadtxt()` wird verwendet, um vollständige Datensätze einzulesen. Fehlende Werte im Datensatz können problematisch sein, da diese entweder zu Fehlermeldungen bezüglich des Datentyps führen oder übersprungen werden, sodass das NumPy-Array kürzer als der eingelesene Datensatz ist. Da NumPy-Arrays immer nur einen Datentyp und eine feste Länge haben, kann das bei der Durchführung von Operationen mit mehreren Arrays zu Fehlern führen.

Folgende Datei ist Ihnen aus dem w-NumPy bekannt.
``` {python}
dateipfad = 'skript/01-daten/TC01.csv'
daten_ohne_fehlende_werte = np.loadtxt(dateipfad)

print("Daten:", daten_ohne_fehlende_werte)
print("Struktur:", daten_ohne_fehlende_werte.shape, "dtype:", daten_ohne_fehlende_werte.dtype)

```

Angenommen, Sie haben eine zweite Messung durchgeführt und möchten die Differenz beider Datensätze berechnen. In der zweiten Messung haben Sensorfehler zu fehlenden Werten geführt, die mit `--` markiert sind. Die Funktion `np.loadtxt()` kann jedoch mit fehlenden Werten nicht umgehen und gibt eine Fehlermeldung zurück. 

``` {python}

dateipfad = 'skript/01-daten/TC01_double_hyphen.csv'

try:
  daten_double_hypen = np.loadtxt(dateipfad)
except ValueError as error:
  print("Die Eingabe führt zu der Fehlermeldung:\n", error)
else:
  print("Daten mit fehlenden Werten '--':", daten_double_hypen, "dtype:", daten_double_hypen.dtype) 
  
```

#### Die Funktion np.genfromtxt()
Um Datensätze mit fehlenden Werten einzulesen, wird die Funktion `np.genfromtxt(fname, delimiter = None, missing_values = None, filling_values = None)` verwendet. Dieses durchläuft den Datensatz `fname` in zwei Schleifen, weshalb die Funktion langsamer als `np.loadtxt()` ist. Die erste Schleife teilt den Datensatz zeilenweise am optional übergebenen Trennzeichen `delimiter` in eine Zeichenkette auf. Die zweite Schleife konvertiert jede Zeichenkette in den passenden Datentyp. Mit den optionalen Argumenten `missing_values` und `filling_values` können der Funktion Zeichenfolgen übergeben werden, mit der fehlende Werte markiert sind bzw. ersetzt werden sollen. ([NumPy Dokumentation](https://numpy.org/doc/stable/user/basics.io.genfromtxt.html))

``` {python}

dateipfad = 'skript/01-daten/TC01_double_hyphen.csv'
daten_double_hypen = np.genfromtxt(dateipfad, missing_values = '--', filling_values = np.nan)

print("\nDaten mit fehlenden Werten '--':", daten_double_hypen)
print("Struktur:", daten_double_hypen.shape, "dtype:", daten_ohne_fehlende_werte.dtype)

```

Durch die Umwandlung fehlender Werte in `NaN`, sind Operationen mit gleichlangen NumPy-Arrays möglich.

``` {python}
daten_differenz = daten_ohne_fehlende_werte - daten_double_hypen
print(daten_differenz)
```

Die Funktion `np.genfromtxt()` kann beliebige Zeichenketten als fehlenden Wert verarbeiten. Lediglich leere Zellen können problematisch sein, da deren Inhalt `'\n'` als Zeilentrenner verarbeitet wird.

::: {#nte-npgenfromtxt .callout-note collapse="true"}
## Leere Zellen mit np.genfromtxt()

Enthält eine Datei leere Zellen, können diese nicht eingelesen werden, da diese automatisch übersprungen werden.
``` {python}

# Datei ohne Markierung fehlender Werte
dateipfad = 'skript/01-daten/TC01_empty_lines.csv'
daten_empty_lines = np.genfromtxt(dateipfad, missing_values = '', filling_values = np.nan) 

print("\nDaten mit fehlenden Werten '':", daten_empty_lines)
print("Struktur:", daten_empty_lines.shape, "dtype:", daten_empty_lines.dtype)

```

Das Array ist zwei Elemente kürzer. Die Subtraktion von einem längeren NumPy-Array scheitert mit einer Fehlemeldung.

``` {python}

try:
  result = daten_ohne_fehlende_werte - daten_empty_lines
except ValueError as error:
  print("Die Eingabe führt zu der Fehlermeldung:\n", error)
else:
  print(result)

```

In diesem Fall muss auf die Stringbearbeitung aus der Python-Basis zurückgegriffen werden. Die bearbeitete Liste kann wie gewohnt mit `np.genfromtxt()` eingelesen werden.

``` {python}

# Einlesen über Datenobjekt
datenobjekt_empty_lines = open(dateipfad, 'r', encoding = 'utf-8')
daten_empty_lines = datenobjekt_empty_lines.readlines()
datenobjekt_empty_lines.close()

print("Das ausgelesene Datenobjekt (Ausschnitt):\n", daten_empty_lines[0:10])

# Stringbearbeitung mit replace('\n', '')
for i in range(len(daten_empty_lines)):

  if daten_empty_lines[i] == '\n':
    daten_empty_lines[i] = 'platzhalter'
  else:
    daten_empty_lines[i] = daten_empty_lines[i].replace('\n', '')

print("\nNach der Stringbearbeitung (Ausschnitt):\n", daten_empty_lines[0:10])

# Einlesen mit np.genfromtxt
daten_empty_lines = np.genfromtxt(daten_empty_lines, missing_values = 'platzhalter', filling_values = np.nan)
print("\nDaten mit fehlenden Werten '':", daten_empty_lines)
print("Struktur:", daten_empty_lines.shape, "dtype:", daten_empty_lines.dtype)
```

:::

Besonders bei Dateien mit mehreren Spalten führen leere Zellen schnell zu Fehlern. Hier ist es erforderlich, den Zeichentrenner mit dem Argument `delimiter` zu spezifizieren. Aus der Dokumentation:  
"When spaces are used as delimiters, or when no delimiter has been given as input, there should not be any missing data between two fields." ([NumPy Dokumentation](https://numpy.org/doc/stable/reference/generated/numpy.genfromtxt.html))

::: {#nte-npgenfromtxt .callout-note collapse="true"}
## Leere Zellen in mehreren Spalten mit np.genfromtxt()
Ohne Spezifikation des Arguments `delimiter` wird nur eine Spalte eingelesen, die ausschließlich `np.nan` enthält.
``` {python}
# ohne Spezifikation von delimiter
dateipfad = 'skript/01-daten/TC01_missing_values_multi_column.csv'
daten_empty_lines2 = np.genfromtxt(dateipfad, missing_values = '', filling_values = np.nan, ndmin = 2)

print("Struktur:", daten_empty_lines2.shape, "dtype:", daten_empty_lines2.dtype)
print("Die ersten drei Zeilen:\n", daten_empty_lines2[0:3])

```

Wird das Argument `delimiter = ','` übergeben, wird die Datei korrekt eingelesen.
``` {python}
# mit Spezifikation von delimiter
daten_empty_lines2 = np.genfromtxt(dateipfad, delimiter = ',', missing_values = '', filling_values = np.nan, ndmin = 2)

print("Struktur:", daten_empty_lines2.shape, "dtype:", daten_empty_lines2.dtype)
print("\nDaten mit fehlenden Werten '':\n", daten_empty_lines2)
```

:::

#### Fehlende Werte in NumPy erzeugen, prüfen, finden, ersetzen, löschen
Das Modul NumPy bietet Funktionen, um mit fehlenden Werten zu arbeiten.

  - `np.nan` erzeugt einen fehlenden Wert.

  - `np.isnan()` prüft auf einen fehlenden Wert und gibt einen Wahrheitswert bzw. ein NumPy-Array mit dtype bool zurück.

  - `np.nonzero(np.isnan(array))` gibt ein Tuple zurück, das ein Array mit den Indexpositionen der Elemente mit dem Wert 'NaN' enthält. Auf das Array kann mit `np.nonzero(np.isnan(array))[0]` zugegriffen werden. Je nach Situation kann die Umwandlung in eine Liste nützlich sein `np.nonzero(np.isnan(array))[0].tolist()`.  
  Eine ähnliche Funktion ist `np.argwhere(np.isnan(array))`, deren Ausgabe aber nicht für das Slicing mehrdimensionaler Arrays geeignet ist (siehe folgendes Beispiel).  

::: {#nte-npargwhere .callout-note collapse="true"}
## Die Funktion np.argwhere()

Eine andere Funktion, um die Indexposition eines Werts zu bestimmen, ist die Funktion `np.argwhere()`. Der Aufruf der Funktion `np.argwhere(np.isnan(array))` gibt ein NumPy-Array mit den Indexposition Elemente mit dem Wert `NaN` zurück. 

``` {python}
array = np.array([[1, np.nan, np.nan], [4, 5, np.nan]])
print(array)

np.argwhere(np.isnan(array))
```

Das mit `np.argwhere()` erzeugte Array ist aber nicht geeignet, um Arraybereiche auszuwählen.

``` {python}
try:
  array[np.argwhere(np.isnan(array))]
except IndexError as error:
  print("Die Eingabe führt zu der Fehlermeldung:\n", error)
else:
  print(array[np.argwhere(np.isnan(array))]) 

```

Zum Vergleich mit `np.nonzero()`

``` {python}
try:
  array[np.nonzero(np.isnan(array))]
except IndexError as error:
  print("Die Eingabe führt zu der Fehlermeldung:\n", error)
else:
  print(array[np.nonzero(np.isnan(array))]) 


```

:::: {#wrn-npargwhere .callout-warning appearance="simple" collapse="false"}
## Die Funktion np.arghwhere()
Die Auswahl von Array-Bereichen mit `np.argwhere()` funktioniert für eindimensionale Arrays.
``` {python}
array = np.array([1, np.nan, np.nan, 4, 5])

try:
  array[np.argwhere(np.isnan(array))]
except IndexError as error:
  print("Die Eingabe führt zu der Fehlermeldung:\n", error)
else:
  print(array[np.argwhere(np.isnan(array))]) 
```

::::
:::

  - `nan_to_num(x = array, nan = 0.0)` ersetzt im Array x `NaN` durch den Wert 0.0 oder durch den im Argument `nan` übergebenen Wert. (Hinweis: `nan_to_num()` ersetzt standardmäßig auch np.inf durch große positive sowie -np.inf durch große negative Zahlen.)  
  Die Ersetzung eines bestimmten Werts ist auch mit einem logischen Vektor möglich (siehe folgendes Beispiel).

::: {#nte-vectorslicing .callout-note collapse="true"}
## Wertzuweisung mit logischem Vektor
Die Ersetzung eines bestimmten Werts ist auch durch die Auswahl bestimmter Array-Bereiche durch einen logischen Vektor möglich.
``` {python}
a = np.array([1, 2, 3, np.nan, 5, 6, np.nan])

b = np.isnan(a)

a[b] = 0

print(a)
```

Dabei können mehrere Bedingungen in Form eines logischen ODER kombiniert werden. Der Operator + bewirkt das gleiche wie der logische Operator `or`.
``` {python}
a = np.array([1, 2, 3, np.nan, 5, 6, np.nan])

bedingung1 = np.isnan(a)

bedingung2 = a >= 5

bedingung = bedingung1 + bedingung2

a[bedingung] = 0

print(a)
```

Auch ein logisches UND ist möglich (aber in Verbindung mit np.NaN nicht sinnvoll). Der Operator * bewirkt das gleiche wie der logische Operator `and`.
``` {python}
a = np.array([1, 2, 3, np.nan, 5, 6, np.nan])

bedingung1 = a < 4

bedingung2 = a >= 1

bedingung = bedingung1 * bedingung2

a[bedingung] = 0

print(a)
```

:::

  - `np.delete(arr = array, obj)` gibt ein neues (kürzeres) Array ohne die im Parameter obj spezifizierten Array-Bereiche zurück. Alle Elemente mit dem Wert `NaN` werden so gelöscht: `np.delete(array, obj = np.nonzero(np.isnan(array)))`  

NumPy wandelt `None` nicht automatisch in `NaN` um. NumPy kann den Datentyp des Objekts deshalb nicht bestimmen und gibt `dtype=object` aus:

``` {python}

np_array_with_none = np.array([1, 2, None, 4])
print(np_array_with_none, np_array_with_none.dtype)

```

**Aufgabe: Wie kann im Array np_array_with_none `None` durch `np.nan` ersetzt werden?**

::: {#tip-numpynone .callout-tip collapse="true"}
## Lösung
Eine logische Abfrage von `None` ist möglich. Auf diese Weise kann ein logisches Array erzeugt werden, das zur Auswahl der Indexpositionen verwendet wird, deren Werte ersetzt werden sollen.
``` {python}
np_array_with_none = np.array([1, 2, None, 4])
print(np_array_with_none)

np_array_with_nan = np_array_with_none.copy()

print(f"\nArray mit logischer Abfrage von None:\n{np_array_with_none == None}")
np_array_with_nan[np_array_with_none == None] = np.nan
print(f"\nArray mit None ersetzt durch NaN:\n{np_array_with_nan, np_array_with_nan.dtype}")
```

::: 

&nbsp;

#### Operationen mit fehlenden Werten
Operationen mit `NaN` ergeben immer `NaN`. Deshalb gibt es in NumPy viele Funktionen, die `NaN` automatisch ignorieren bzw. durch einen geeigneten Wert ersetzen. Diese sind bereits am Funktionsnamen erkennbar. Beispielsweise liefern `np.nansum()` und `np.nancumsum()` die Summe bzw. die kumulierte Summe eines Arrays. In der kumulierten Summe werden `NaN` durch das laufende Ergebnis ersetzt. Eine vollständige Liste der NumPy-Funktionen finden Sie in der [Dokumentation](https://numpy.org/doc/stable/reference/routines.html).

``` {python}
print(f"Array mit NaN:\n{np_array_with_nan}\n")

print(f"Summe des Arrays:\n{np.sum(np_array_with_nan)}\n")

print(f"NaN-Summe des Arrays:\n{np.nansum(np_array_with_nan)}\n")

print(f"kumulierte Summe des Arrays:\n{np.cumsum(np_array_with_nan)}\n")

print(f"kumulierte NaN-Summe des Arrays:\n{np.nancumsum(np_array_with_nan)}\n")
```

### Pandas
Die Pandas-Funktionen zum Lesen von Dateien können mit fehlenden Werten umgehen. Standardmäßig werden folgende Werte als fehlende Werte erkannt:  
`['-1.#IND', '1.#QNAN', '1.#IND', '-1.#QNAN', '#N/A N/A', '#N/A', 'N/A', 'n/a', 'NA', '<NA>', '#NA', 'NULL', 'null', 'NaN', '-NaN', 'nan', '-nan', 'None', '']`

Weitere Werte können mit dem Argument `na_values = []` als fehlende Werte definiert werden. Mit dem Argument `keep_default_na = False` kann festgelegt werden, dass ausschließlich die in `na_values = []` übergebenen Werte als fehlende Werte interpretiert werden sollen. Standardmäßig werden mit dem Argument `na_filter = True` auch leere Zellen als NA eingelesen. Vollständig leere Zeilen werden jedoch standardmäßig übersprungen. Dies kann mit dem Argument `skip_blank_lines = False` geändert werden. ([Pandas Dokumentation](https://pandas.pydata.org/docs/user_guide/io.html#io-navaluesconst))  

Fehlende Werte können mit dem Argument `na_values = []` spezifiziert werden.
``` {python}
dateipfad = 'skript/01-daten/TC01_double_hyphen.csv'

try:
  daten_double_hypen = pd.read_csv(dateipfad, na_values = ['--'])
except ValueError as error:
  print("Die Eingabe führt zu der Fehlermeldung:\n", error)
else:
  print("Daten mit fehlenden Werten '--':\n", daten_double_hypen, daten_double_hypen.shape) 

```

Mit dem Argument `skip_blank_lines = False` werden leere Zeilen ebenfalls eingelesen. 
``` {python}
dateipfad = 'skript/01-daten/TC01_empty_lines.csv'

try:
  daten_empty_lines = pd.read_csv(dateipfad, skip_blank_lines = False)
except ValueError as error:
  print("Die Eingabe führt zu der Fehlermeldung:\n", error)
else:
  print("Daten mit fehlenden Werten '':\n", daten_empty_lines, daten_empty_lines.shape) 

```

Pandas verwendet abhängig vom Datentyp verschiedene Werte zur Kennzeichnung fehlender Werte.

  - `numpy.nan` für NumPy-Datentypen. Hierbei wird der Datentyp automatisch in `np.float64` oder `object` konvertiert.

  - `pd.NA` für Zeichenketten und Ganzzahlen. Der Datentyp bleibt erhalten.

Einlesen der Datei TC01_empty_lines.csv als string:
``` {python}
dateipfad = 'skript/01-daten/TC01_empty_lines.csv'

try:
  daten_empty_lines = pd.read_csv(dateipfad, skip_blank_lines = False, dtype = 'string')
except ValueError as error:
  print("Die Eingabe führt zu der Fehlermeldung:\n", error)
else:
  print("Daten mit fehlenden Werten '':\n", daten_empty_lines, daten_empty_lines.shape) 

```

`NA` kann zwar auch als fehlender Wert für Gleitkommazahlen und andere NumPy Datentypen verwendet werden. Allerdings wird dafür ein Pandas-Dateityp benötigt (siehe das folgende Beispiel).

::: {#nte-pdNA .callout-note collapse="true"}
## pd.Series mit np.nan und pd.NA
Eine pd.Series mit `np.nan` wird automatisch in `dtype: float64` umgewandelt: 
``` {python}

try:
  test = pd.Series([1, 2, np.nan])
except TypeError as error:
  print("Die Eingabe führt zu der Fehlermeldung:\n", error)
else:
  print(test) 

```

Eine pd.Series mit `pd.NA` wird als `dtype: object` eingelesen: 
``` {python}

try:
  test = pd.Series([1, 2, pd.NA])
except TypeError as error:
  print("Die Eingabe führt zu der Fehlermeldung:\n", error)
else:
  print(test) 

```

Der `dtype` kann für eine Series mit `pd.NA` festgelegt werden: 
``` {python}

try:
  test = pd.Series([1, 2, pd.NA], dtype = 'Int32')
except TypeError as error:
  print("Die Eingabe führt zu der Fehlermeldung:\n", error)
else:
  print(test) 

```

Abhängig vom Datentyp kommt es auf den korrekten `dtype` (NumPy oder Pandas) an, erkennbar an der Groß- und Kleinschreibung. `pd.NA` mit Numpy-Fließkommazahl: 
``` {python}

try:
  test = pd.Series([1, 2, pd.NA], dtype = 'float64')
except TypeError as error:
  print("Die Eingabe führt zu der Fehlermeldung:\n", error)
else:
  print(test) 

```

`pd.NA` mit Pandas-Fließkommazahl:
``` {python}

try:
  test = pd.Series([1, 2, pd.NA], dtype = 'Float64')
except TypeError as error:
  print("Die Eingabe führt zu der Fehlermeldung:\n", error)
else:
  print(test) 

```

`np.nan` mit Numpy-Fließkommazahl:
``` {python}

try:
  test = pd.Series([1, 2, np.nan], dtype = 'float64')
except TypeError as error:
  print("Die Eingabe führt zu der Fehlermeldung:\n", error)
else:
  print(test) 

```

`np.nan` mit Pandas-Fließkommazahl:
``` {python}

try:
  test = pd.Series([1, 2, np.nan], dtype = 'Float64')
except TypeError as error:
  print("Die Eingabe führt zu der Fehlermeldung:\n", error)
else:
  print(test) 

```

:::

&nbsp;

::: {#wrn-logicpandas .callout-warning appearance="simple" collapse="false"}
## Achtung Logik!

Die logische Abfrage fehlender Werte unterscheidet sich für `None`, `np.nan` und `pd.NA`. 

``` {python}

bool_values = [None, float('NaN'), pd.NA]

for element in bool_values:
  try:
    bool_value = bool(element)
  except TypeError as error:
      print(error)
  else:
    print("Wahrheitswert von", element, "ist", bool_value)

```

Dies gilt auch für die logische Identität.
``` {python}

bool_values = [None, float('NaN'), pd.NA]

for element in bool_values:
  try:
    result = element == element
  except TypeError as error:
      print(error)
  else:
    print("Identität von", element, "ist", result)

```

::: 

([Pandas Dokumentation](https://pandas.pydata.org/docs/user_guide/missing_data.html))

#### Fehlende Werte in Pandas erzeugen, prüfen, finden, ersetzen, löschen
Das Modul Pandas wandelt `None` automatisch in `NaN` um. Das Modul Pandas bietet wie das Modul NumPy verschiedene Funktionen, um mit fehlenden Werten zu arbeiten.

  - `pd.NA` erzeugt einen fehlenden Wert (Groß- und Kleinschreibung beachten: `pd.na` funktioniert nicht)
  
  - Die Funktionen `pd.isnull()` und `pd.isna()` prüfen auf einen fehlenden Wert und geben einen Wahrheitswert bzw. ein NumPy-Array mit dtype bool zurück. Die Funktionen `pd.notna()` und `pd.notnull()` prüfen den umgekehrten Fall.

  - Die Methode `pd.isna().nonzero()` verwendet die NumPy-Funktion `np.nonzero` und gibt ein Array mit den Indexpositionen der Elemente mit fehlenden Werten zurück.

  - `pd.Series.fillna(value = 0)` ersetzt fehlende Werte mit dem im Argument `value` übergebenen Wert. Die Methoden `pd.ffill()` und `pd.bfill()` ersetzen fehlende Werte mit dem letzten bzw. dem nächsten gültigen Wert. Die Methode `pd.Series.interpolate()` ersetzt fehlende Werte durch Interpolation, wofür ein Datentyp definiert sein muss (`dtype = object` funktioniert nicht). Standardmäßig wird linear interpoliert, es stehen aber verschiedene Methoden zur Verfügung (siehe [Pandas Dokumentation](https://pandas.pydata.org/docs/reference/api/pandas.Series.interpolate.html))

  - Die Methode `pd.Series.dropna()` gibt eine neue (kürzere) Series ohne fehlende Wert zurück.

#### Operationen mit fehlenden Werten
Operationen mit `pd.NA` ergeben in der Regel `pd.NA`. Es gibt jedoch einige Ausnahmen:

``` {python}
print(pd.NA ** 0)
print(1 ** pd.NA)

```

Die Methode `pd.Series.sum()` behandelt `pd.NA` als 0, die Methode `pd.Series.prod()` als 1.
``` {python}
print(pd.Series([pd.NA]).sum())
print(pd.Series([pd.NA]).prod())

```

Reduzierende Methoden wie `pd.Series.min()` oder `pd.Series.mean()` sowie zusammenfassende Methoden wie `pd.Series.cumsum()` oder `pd.Series.cumprod()` überspringen `pd.NA`.
``` {python}
print(pd.Series([pd.NA]).min())
print(pd.Series([pd.NA]).mean())
print(pd.Series([pd.NA]).cumsum())
print(pd.Series([pd.NA]).cumprod())
```

Das Verhalten von Methoden wie `pd.Series.sum()` und von Methoden wie `pd.Series.min()` hat für Datenreihen einen vergleichbaren Effekt, produziert für einzelne Werte jedoch unterschiedliche Ergebnisse.

eventuell ergänzen: **Cumulative methods like cumsum() and cumprod() ignore NA values by default preserve them in the result. This behavior can be changed with skipna** (<https://pandas.pydata.org/docs/user_guide/missing_data.html>)

### Aufgabe fehlende Werte
Der Deutsche Wetterdienst misst deutschlandweit verschiedene Wetterdaten. In der Datei produkt_st_stunde_20230831_20240630_01303.txt sind stündliche Stationsmessungen der Solarstrahlung in Essen-Bredeney gespeichert.

| Spaltenname | Beschreibung |
|---|---|
| STATIONS_ID | Stationsnummer |
| QN_592 | Qualitätsniveau der Daten |
| ATMO_LBERG | Stundensumme der atmosphärischen Gegenstrahlung |
| FD_LBERG | Stundensumme der diffusen solaren Strahlung |
| FG_LBERG | Stundensumme der Globalstrahlung |
| SD_LBERG | Stundensumme der Sonnenscheindauer |
| ZENIT | Zenitwinkel der Sonne 0 - 180 Grad |

::: {.border}
Deutscher Wetterdienst. 2024. Stündliche Stationsmessung der Solarstrahlung (global/diffus) und der atmosphärischen Gegenstrahlung für Deutschland. <https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/hourly/solar/stundenwerte_ST_01303_row.zip> Die Spalten MESS_DATUM, MESS_DATUM_WOZ und eor wurden entfernt.
:::

&nbsp;

**Bestimmen Sie die Kodierung fehlender Werte und ersetzen Sie diese durch `np.nan` bzw. `pd.NA`. Wie viele Werte wurden ersetzt?**  

::: {#tip-musterlösungfehlendewerte .callout-tip collapse="true"}
## Musterlösung fehlende Werte

Mit der Methode `df.info()` ist erkennbar, dass der Datensatz vollständig ist.
``` {python}
dateipfad = "skript/01-daten/produkt_st_stunde_20230831_20240630_01303.txt"
solar = pd.read_csv(dateipfad, sep = ";")

solar.info()
```

Mit der Methode `df.describe()` wird die deskriptive Statistik für numerische Spalten erstellt.  
``` {python}
dateipfad = "skript/01-daten/produkt_st_stunde_20230831_20240630_01303.txt"
solar = pd.read_csv(dateipfad, sep = ";")

solar.describe()
```

Drei Spalten weisen als minimalen Wert -999 auf, der inhaltlich nicht sinnvoll ist. Wie oft kommt der Wert -999 in den Spalten vor?

``` {python}
counting_df = solar[['ATMO_LBERG', 'FD_LBERG', 'FG_LBERG']] == -999
print(counting_df.sum())
print("Summe:\t\t ", counting_df.sum().sum())
```

:::

# Zeitreihen {#sec-zeitreihen}

<!-- ###### INCLUDE ###### -->
<!-- ###### INCLUDE ###### -->
<!-- ###### INCLUDE ###### -->
<!-- ###### INCLUDE ###### -->

{{< include _zeitreihen-python.md >}}


## Datum und Zeit in NumPy und Pandas
Die Module NumPy und Pandas nutzen den Datentyp `datetime64`, um Datums- und Zeitinformationen zu verarbeiten.

::: {.panel-tabset}
## NumPy
`datetime64`-Objekte werden mit der Funktion `np.datetime64()` angelegt, der Datentyp wird in der Ausgabe von Python auch durch den Buchstaben M repräsentiert. `datetime64`-Objekte können auf zwei Arten angelegt werden:

  - Eine Zeichenkette nach [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) als Repräsentation eines Datums in der festgelegten Reihenfolge Jahr, Monat, Tag, Stunde, Minute, Sekunde, Millisekunde im Format `YYYY-MM-DD 12:00:00.000`. Als Zeichentrenner zwischen Datum und Uhrzeit sind ein Leerzeichen oder der Buchstabe T zulässig. Der Datentyp und die kleinste verwendete Einheit werden im Attribut `dtype` gespeichert.
  
``` {python} 
print(np.datetime64('2024'), np.datetime64('2024').dtype)
print(np.datetime64('2024-10-31'), np.datetime64('2024-10-31').dtype)
print(np.datetime64('2024-10-31T12:24:59.999'), np.datetime64('2024-10-31T12:24:59.999').dtype)
```

  - Als Zahl relativ zur Epoche und unter Angabe einer Zeiteinheit. Die verfügbaren Zeiteinheiten sind years ('Y'), months ('M'), weeks ('W'), days ('D') sowie hours ('h'), minutes ('m'), seconds ('s'), milliseconds ('ms') und weitere sekundenbasierte Einheiten bis zur Attosekunde (siehe [NumPy Dokumentation](https://numpy.org/doc/stable/reference/arrays.datetime.html#datetime-units)).

``` {python} 
print(np.datetime64(10 * 1000, 'D'), np.datetime64(10 * 1000, 'D').dtype)
print(np.datetime64(1000 * 1000, 'h'), np.datetime64(1000 * 1000, 'h').dtype)
print(np.datetime64(1000 * 1000 * 1000, 's'), np.datetime64(1000 * 1000 * 1000, 's').dtype)
```

Außerdem können Datetime-Formate anderer Module in `np.datetime64()` umgewandelt werden.

Beim Anlegen eines Arrays, kann die Zeiteinheit gewählt werden.

``` {python}
my_array = np.array(['2007-07-13', '2006-01-13', '2010-08-13'], dtype = 'datetime64[s]')
print(my_array, my_array.dtype)
```

Der Datentyp `datetime64` ist mit den meisten NumPy-Funktionen kompatibel.

``` {python}
np.arange('2005-02', '2005-03', dtype = 'datetime64[D]')
```

([NumPy Dokumentation](https://numpy.org/doc/stable/reference/arrays.datetime.html))

## Pandas

In Pandas werden `datetime64`-Objekte mit den Funktionen `pd.to_datetime()` oder `pd.date_range()` angelegt.  
*Hinweis: Eine weitere Möglichkeit ist die Funktion `pd.Timestamp()`, die umfangreichere Möglichkeiten zur Erzeugung eines Zeitpunkts bietet, aber kein string-parsing unterstützt.*

`pd.to_datetime()` erzeugt Werte des Datentyps `datetime64[ns]` (mit `pd.to_datetime()` erzeugte Skalare werden als Timestamp (Zeitpunkt) ausgegeben, die kein Attribut `dtype` haben). Die Funktion `pd.to_datetime()` akzeptiert als Eingabewerte:

  - datetime-Objekte anderer Module.

  - Zahlen und eine Zeiteinheit `pd.to_datetime(1, unit = None)` (Standard sind Nanosekunden). Das Argument `unit` nimmt die Werte 'ns', 'ms', 's', 'm', 'h', 'D', 'W', 'M', 'Y' für Nanosekunde, Millisekunde, Sekunde, Minute, Stunde, Tag, Woche, Monat bzw. Jahr entgegen. Erzeugt wird ein Zeitpunkt relativ zur Epoche.
  
``` {python}
print(pd.to_datetime(1000, unit = 'D'))
print(pd.to_datetime(1000 * 1000, unit = 'h'))
print(pd.to_datetime(1000 * 1000 * 1000, unit = 's'))
```

  - Zeichenketten, die ein Datum oder ein Datum mit Uhrzeit ausdrücken, formatiert nach [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html).

``` {python}
print(pd.to_datetime('2017'))
print(pd.to_datetime('2017-01-01T00'))
print(pd.to_datetime('2017-01-01 00:00:00'))
```

  - Anders formatierte Zeichenketten mit dem Argument format = `"%d/%m/%Y"` (siehe [Dokumentation strftime zur string-Formatierung](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior)).

``` {python}
print(pd.to_datetime('Monday, 12. August `24', format = "%A, %d. %B `%y"))
print(pd.to_datetime('Monday, 12. August 2024, 12:15 Uhr CET', format = "%A, %d. %B %Y, %H:%M Uhr %Z"))
```

  - Dictionary oder DataFrame.

``` {python}
print(pd.to_datetime({'year':[2020, 2024], 'month': [1, 11], 'day': [1, 21]}), "\n")
print(pd.to_datetime(pd.DataFrame({'year':[2020, 2024], 'month': [1, 11], 'day': [1, 21]})))
```

Die Funktion `pd.date_range()` erzeugt ein Array vom Typ `DatetimeIndex` mit dtype `datetime64`. Genau drei der folgenden vier Argumente sind für die Erzeugung erforderlich: 

  - start: Beginn der Reihe.

  - end: Ende der Reihe (inklusiv)

  - freq: Schrittweite (bspw. Jahr, Tag, Geschäftstag, Stunde oder Vielfache wie '6h' - siehe [Liste verfügbarer strings](https://pandas.pydata.org/docs/user_guide/timeseries.html#timeseries-offset-aliases))

  - periods: Anzahl der zu erzeugenden Werte.

``` {python}
#| warning: false

print(pd.date_range(start = '2017', end = '2024', periods = 3), "\n")

print(pd.date_range(start = '2017', end = '2024', freq = 'Y'), "\n")

print(pd.date_range(end = '2024', freq = 'h', periods = 3))
```

*Hinweis: Die Funktion `pd.date_range()` wird künftig das Kürzel 'Y' nicht mehr unterstützen. Stattdessen können die Kürzel 'YS' (Jahresbeginn) oder 'YE' (Jahresende) verwendet werden.*
:::

Zeitdifferenzen werden über einen eigenen Datentyp dargestellt (siehe folgendes Beispiel).  
**Notiz für mich: Anwendungsfall Zeitzonen verschieben unabhängig von einer Zeitzone (und ohne die Zeitzonensyntax)**

::: {.callout-note collapse="true"}
## Zeitdifferenzen in NumPy und Pandas

:::: {.panel-tabset}

## NumPy
Zeitdifferenzen werden mit dem Datentyp `timedelta64` abgebildet. Dieser wird wie `datetime64` durch Angabe einer Ganzzahl und einer Zeiteinheit angelegt.

``` {python}
np.timedelta64(1, 'D')
```

Objekte der Typen `datetime64` und `timedelta64` ermöglichen es, Operationen mit Datum und Zeit durchzuführen (weitere Beispiele in der [NumPy-Dokumentation](https://numpy.org/doc/stable/reference/arrays.datetime.html#datetime-and-timedelta-arithmetic)).

``` {python}
print(np.datetime64('today') - np.datetime64('2000-01-01', 'D'))
print(np.datetime64('now') - np.datetime64('2000-01-01', 'h'))

print("\n\nEine einfache Zeitverschiebung:", np.datetime64('now') - np.timedelta64(1, 'h'))
print("Wie viele Tage hat die Woche?", np.timedelta64(1,'W') / np.timedelta64(1,'D'))
```

## Pandas
Zeitdifferenzen können zum einen wie in NumPy durch Angabe einer Ganzzahl und einer Zeiteinheit angelegt werden. Außerdem ist die Übergabe mit Argumenten möglich (zulässige Argumente sind: weeks, days, hours, minutes, seconds, milliseconds, microseconds, nanoseconds).

``` {python}
pd.Timedelta(1, 'D')
pd.Timedelta(days = 1, hours = 1)
```

**Wichtig:** Anders als in NumPy werden Zeitdifferenzen in Monaten und Jahren nicht mehr von Pandas unterstützt.

``` {python}
try:
  print( pd.Timedelta(1, 'Y'))
except ValueError as error:
  print(error)
else:
  print( pd.Timedelta(1, 'Y'))
```

Zum anderen können Zeitdifferenzen mit einer Zeichenkette erzeugt werden.
``` {python}
print(pd.Timedelta('10sec'))
print(pd.Timedelta('10min'))
print(pd.Timedelta('10hours'))
print(pd.Timedelta('10days'))
print(pd.Timedelta('10w'))
```

Mit Hilfe einer Zeitdifferenz können Zeitreihen leicht verschoben werden.

``` {python}
pd.date_range(start = '2024-01-01T00:00', end = '2024-01-01T02:00', freq = '15min') + pd.Timedelta('30min')
```

::::

&nbsp;

**Wie alt sind Sie in Tagen? Wie alt in Sekunden? Rechnen Sie mit NumPy oder Pandas.**

:::: {#tip-alter .callout-tip collapse="true"}
## Tipp Pandas und Musterlösung Alter

Für eine elegante Lösung in Pandas schauen Sie sich die verfügbaren Methoden und Attribute von Timedelta-Objekten an.

``` {.raw}
dir(pd.Timedelta(0))
```

::::: {#tip-loesungalter .callout-tip collapse="true"}
## Musterlösung

Ersetzen sie in der Lösung die Zeichenkette 'YYYY-MM-DD' bzw., wenn Sie die Uhrzeit Ihrer Geburt kennen, die Zeichenkette 'YYYY-MM-DDTHH:MM' durch ihren Geburtstag.

#### NumPy
In NumPy können die Schlüsselwörter `np.datetime64('today')` und `np.datetime64('now')` verwendet werden. Die Ausgabe ist in Tagen bzw. in Sekunden aufgelöst.

``` {.raw}
print(np.datetime64('today') - np.datetime64('YYYY-MM-DD', 'D'))
print(np.datetime64('now') - np.datetime64('YYYY-MM-DDTHH:MM', 's'))
```

#### Pandas
In Pandas werden die Schlüsselwörter `pd.to_datetime('today')` und `pd.to_datetime('now')` in Nanosekunden aufgelöst.  

``` {.raw}
(pd.to_datetime('today') - pd.to_datetime('YYYY-MM-DD')).days
(pd.to_datetime('now') - pd.to_datetime('YYYY-MM-DDTHH:MM')).total_seconds()

```
:::::
::::
:::

## Zeitreihen einlesen
Die Module NumPy und Pandas (**eigentlich nur Pandas?!**) bieten effiziente Möglichkeiten, um Datumsformate korrekt einzulesen. Dies wird im Folgenden anhand von Strommarktdaten demonstriert. Anschließend stehen verschiedene Übungsaufgaben zur Verfügung.

Die Bundesnetzagentur veröffentlicht auf [https://www.smard.de/](https://www.smard.de/home/downloadcenter/download-marktdaten/) Strommarktdaten, darunter die Großhandelspreise. Die Strommarktdaten der Bundesnetzagentur müssen manuell auf [https://www.smard.de/](https://www.smard.de/home/downloadcenter/download-marktdaten/) heruntergeladen werden. In diesem Skript werden Daten für das Jahr 2023 benutzt.

::: {style="font-size: 90%;"}
| Daten | Dateiname |
|---|---|
| Großhandelspreise 2023 | Gro_handelspreise_202301010000_202401010000_Stunde.csv |
| Großhandelspreise 2023 (Englisch) | Day-ahead_prices_202301010000_202401010000_Hour.csv |
:::

::: {#wrn-SMARD .callout-warning appearance="simple" collapse="true"}
## SMARD Daten herunterladen

:::: {layout="[[50, 50], [50, 50], [1]]"}

Beim der Auswahl des Zeitraums auf Akzeptieren klicken. 

Daten in Originalauflösung auswählen und auf Download klicken.

![&nbsp;](skript/00-bilder/smard-accept.png)

![&nbsp;](skript/00-bilder/smard-day-ahead-prices.png)

Das Datumsformat der Dateien ist abhängig von der auf der Internetseite eingestellten Sprache (Deutsch/English).
::::
:::

::: {.panel-tabset}

### NumPy
Der Versuch, die Datei mit `np.loadtxt()` einzulesen, führt zu verschiedenen Fehlermeldungen (Datentyp ist nicht numerisch, Spaltenzahl kann nicht ermittelt werden). Diesen wird durch Spezifizierung des Datentyps `dtype = str` und der Beschränkung auf die erste Zeile `max_rows = 1` begegnet.

``` {python}
dateipfad = "skript/01-daten/Gro_handelspreise_202301010000_202401010000_Stunde.csv"
preise = np.loadtxt(fname = dateipfad, dtype = 'str', max_rows = 1)
preise
```

Auf diese Weise kann die erste Zeile eingelesen und das Semikolon als Zeichentrenner identifiziert werden. Außerdem sind Fehler mit der Zeichenkodierung auffällig. Deshalb werden der Zeichentrenner mit `delimiter = ';'` und die Kodierung der Datei mit `encoding = 'UTF-8' übergeben.

``` {python}
dateipfad = "skript/01-daten/Gro_handelspreise_202301010000_202401010000_Stunde.csv"
preise = np.loadtxt(fname = dateipfad, dtype = 'str', max_rows = 1, delimiter = ';', encoding = 'UTF-8')
preise
```

Es verbleibt die Zeichenkette "\\ufeff" am Beginn des Arrays. Diese kennzeichnet die [Byte-Reihenfolge](https://de.wikipedia.org/wiki/Byte-Reihenfolge) der Datei. Diese kann mit der Übergabe der Kodierung `encoding = 'UTF-8-sig'` übersprungen werden ([Mark Tolonen auf stackoverflow.com](https://stackoverflow.com/a/72466627), [Python Dokumentation](https://docs.python.org/3/library/codecs.html)). Auf diese Weise wird die erste Zeile korrekt eingelesen, sodass die Anzahl der einzulesenden Zeilen mit `max_rows = 2` erweitert werden kann, um die Datentypen zu identifizieren.

``` {python}
dateipfad = "skript/01-daten/Gro_handelspreise_202301010000_202401010000_Stunde.csv"
preise = np.loadtxt(fname = dateipfad, dtype = 'str', max_rows = 2, delimiter = ';', encoding = 'UTF-8-sig')
preise
```

Die ersten beiden Spalten enthalten Datums- und Zeitinformationen, die folgenden numerische Werte, wobei eine Spalte mit '-' kodierte fehlende Werte enthält. Als Dezimaltrennzeichen wird das Komma verwendet. Da NumPy-Arrays immer nur einen Datentyp enthalten können, muss der Datensatz entsprechend aufgeteilt werden. Für die viertletzte Spalte ist zu prüfen, ob diese ausschließlich fehlende Werte enthält.

Zunächst wird der Datensatz vollständig als string eingelesen, die Spaltenbeschriftungen werden mit `skiprows = 1` übersprungen.

``` {python}
preise = np.loadtxt(fname = dateipfad, dtype = 'str', delimiter = ';', encoding = 'UTF-8-sig', skiprows = 1)
```

Anschließend werden im ersten Schritt die Datumsspalten isoliert. NumPy unterstützt keine String-Formatierung, die Zeitstempel müssen deshalb manuell von '01.01.2023 00:00' in die Formatierung nach ISO 8601 'YYYY-MM-DDThh:mm' konvertiert werden.

``` {python}
# Datumsspalten isolieren
preise_date = preise[ : , 0:2]

# Zeichenkette manuell ins Format ISO 8601 bringen
## Spalte 0
### neues Array anlegen
preise_datumvon = np.array([], dtype = 'datetime64')

for element in preise_date[ : , 0]:

  # string umstellen
  neues_element = element[6:10] + '-' + \
  element[3:5] + '-' + \
  element[0:2] + 'T' + \
  element[11:13] +  ':' + \
  element[14:]

  # in datetime64 konvertieren
  neues_element = np.datetime64(neues_element)

  # anhängen
  preise_datumvon = np.append(preise_datumvon, neues_element)

## Spalte 1
### neues Array anlegen
preise_datumbis = np.array([], dtype = 'datetime64')

for element in preise_date[ : , 1]:

  # string umstellen
  neues_element = element[6:10] + '-' + \
  element[3:5] + '-' + \
  element[0:2] + 'T' + \
  element[11:13] +  ':' + \
  element[14:]

  # in datetime64 konvertieren
  neues_element = np.datetime64(neues_element)

  # anhängen
  preise_datumbis = np.append(preise_datumbis, neues_element)

# die letzten 4 Elemente angucken
print(preise_datumvon[-4:], preise_datumvon.dtype)
print(preise_datumbis[-4:], preise_datumbis.dtype)

```

Im zweiten Schritt wird geprüft, ob die viertletzte Spalte ausschließlich fehlende Werte enthält. Die Position der Spalte ist zwar bekannt, wird aber dennoch mit der Funktion `np.argwhere()` ermittelt. Mit der Funktion `len(np.unique())` werden die einzigartigen Werte abgezählt. 

``` {python}
# numerische Spalten isolieren
preise_numeric = preise[ : , 2:]

# Position der Spalte mit fehlendem Wert '-' in der nullten Zeile finden
position = np.argwhere(preise_numeric[0, : ] == '-')
print("Spaltenindex:", position)

# prüfen, welche Werte in der Spalte vorkommen
print("Anzahl einzigartiger Werte:", len(np.unique(preise_numeric[:, position])))

```

Da die viertletzte Spalte ausschließlich das Zeichen '-' enthält, kann die Spalte entfernt werden. Anschließend kann der Datentyp als Fließkommazahl deklariert werden. Dazu ist es erforderlich, mit `np.char.replace(preise_numeric, ',', '.')` das Dezimaltrennzeichen Komma durch den Punkt zu ersetzen. Die Spaltennamen müssen separat gespeichert werden.

``` {python}
# Spalte mit fehlenden Werten entfernen
preise_numeric = np.delete(arr = preise_numeric, obj = position, axis = 1) # axis 1 = columns

# Dezimaltrennzeichen ersetzen
preise_numeric = np.char.replace(preise_numeric, ',', '.')
preise_numeric = preise_numeric.astype('float64')

# Spaltennamen speichern
preise_numeric_colnames = np.loadtxt(fname = dateipfad, dtype = 'str', delimiter = ';', encoding = 'UTF-8-sig', max_rows = 1)
preise_numeric_colnames = preise_numeric_colnames[2:] # Datumsspalten entfernen
preise_numeric_colnames = np.delete(arr = preise_numeric_colnames, obj = position)

print(preise_numeric_colnames, "\n")
print(preise_numeric[0:2, :], preise_numeric.dtype)
```

Objekt nach Datentyp aufteilen: 

  - Datumsspalten

  - numerische Spalten

  - Spalte mit '-' (bzw. verwerfen)
  
    - erst einmal die Spalte finden mit skiprows = 1 & max_rows = 1

    - die Spalte einlesen und gucken, ob alle Zeilen '-' sind, z. B. mit np.unique()
    
    - usecols =  np.invert(np.argwere('-'))

### Pandas
Zunächst wird die Datei der Großhandelspreise mit der Funktion `pd.read_csv()` eingelesen und der Erfolg durch Aufruf der Funktionen `pd.info()` kontrolliert.

``` {python}
dateipfad = "skript/01-daten/Gro_handelspreise_202301010000_202401010000_Stunde.csv"
preise = pd.read_csv(filepath_or_buffer = dateipfad)
print(preise.info())
```

Es wird nur eine Spalte erkannt, da im Datensatz das Semikolon als Zeichentrenner verwendet wird, das nun mit dem Argument `sep = ';'` übergeben wird (Standardwert ist das Komma). Durch Aufruf der Funktionen `pd.info()` und `pd.head()` wird der Erfolg kontrolliert.

``` {python}
dateipfad = "skript/01-daten/Gro_handelspreise_202301010000_202401010000_Stunde.csv"
preise = pd.read_csv(filepath_or_buffer = dateipfad, sep = ';')
print(preise.info())
preise.head()
```

&nbsp;

In der Ausgabe ist am Datentyp object erkennbar, dass für keine Spalte der Datentyp erkannt wurde. In der Darstellung der ersten Zeilen des Datensatzes ist das Komma als Dezimaltrennzeichen zu sehen, der Standardwert der Funktion `pd.read_csv()` ist aber der Punkt. Nach Übergabe des Dezimaltrennzeichens sollten die numerischen Spalten korrekt erkannt werden.

``` {python}
preise = pd.read_csv(filepath_or_buffer = dateipfad, sep = ';', decimal = ',')
print(preise.info())
```

Der Datentyp der Spalte DE/AT/LU [€/MWh] Originalauflösungen wird nicht als float64 erkannt. In der Ausgabe ist zu sehen, dass wenigstens in den ersten Zeilen fehlende Werte durch '-' markiert sind. Mittels der Methode `.describe()` kann überprüft werden, ob die Spalte überhaupt numerische Werte enthält.

``` {python}
preise['DE/AT/LU [€/MWh] Originalauflösungen'].describe()
```

Da dies nicht der Fall ist, kann die Spalte entfernt werden. Anschließend können die ersten beiden Spalten mit der Funktion 'pd.to_datetime()' in ein Datumsformat konvertiert werden. Eine Zelle enthält Zeichenketten im Schema '01.01.2023 00:00'. Mit Hilfe der [strftime-Dokumentation](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior) kann der Funktion das Datumsformat übergeben werden.

``` {python}
preise.drop(labels = 'DE/AT/LU [€/MWh] Originalauflösungen', axis = 'columns', inplace = True)

## Datumsspalten konvertieren
preise['Datum von'] = pd.to_datetime(preise['Datum von'], format = "%d.%m.%Y %H:%M")
preise['Datum bis'] = pd.to_datetime(preise['Datum bis'], format = "%d.%m.%Y %H:%M")
print(preise.info())
```

Wenn der innere Aufbau einer Datei bekannt ist, können die notwendigen Parameter auch direkt beim Einlesen mit `pd.read_csv` übergeben werden (Argumente `usecols`, `parse_dates` und `date_format`).

``` {python}
preise = pd.read_csv(filepath_or_buffer = dateipfad, sep = ';', decimal = ',',
                     usecols = list(range(0, 15)) + list(range(16, 19)), # Auswahl der einzulesenden Spalten
                     parse_dates = ['Datum von', 'Datum bis'], date_format = "%d.%m.%Y %H:%M") # Formatierung des Datums
print(preise.info())

```
:::

**Aufgabe: Lesen Sie die englische Datei 'Day-ahead_prices_202301010000_202401010000_Hour.csv' so ein, dass die Datentypen korrekt erkannt werden.**

**Die Musterlösung kann Marc machen**.

::: {#tip-strompreise .callout-tip collapse="true"}
## Musterlösung Strompreise

:::

## Zugriff auf Zeitreihen
Die Module NumPy und Pandas bieten zahlreiche Möglichkeiten, um auf Zeitreihen zuzugreifen. Angenommen, wir interessieren uns für die durchschnittlichen Strompreise an Werktagen und am Wochenende.
**eventl. wieder mit panel-tabset für NumPy und Pandas**

### NumPy
**to do**

### Pandas

Pandas bietet zahlreiche Attribute und Methoden, um Informationen aus `datetime64`-Objekten auszulesen. Eine Übersicht aller verfügbaren Attribute und Methoden liefert  `dir(pd.to_datetime(0))`.

``` {python}
# Attribute
print("Jahr:", pd.to_datetime(0).year)
print("Monat:", pd.to_datetime(0).month)
print("Tag:", pd.to_datetime(0).day)
print("Stunde:", pd.to_datetime(0).hour)
print("Minute:", pd.to_datetime(0).minute)
print("Sekunde:", pd.to_datetime(0).second)
print("Tag des Jahres:", pd.to_datetime(0).dayofyear)
print("Wochentag:", pd.to_datetime(0).dayofweek)
print("Tage im Monat:", pd.to_datetime(0).days_in_month)
print("Schaltjahr:", pd.to_datetime(0).is_leap_year)

# Methoden
print("\nDatum:", pd.to_datetime(0).date())
print("Zeit:", pd.to_datetime(0).time())
print("Wochentag (0-6):", pd.to_datetime(0).weekday())
print("Monatsname:",  pd.to_datetime(0).month_name())
```

Für `pd.Series` erfolgt der Zugriff über den .dt- Operator (siehe [.dt accessor](https://pandas.pydata.org/docs/user_guide/basics.html#basics-dt-accessors)).

**Vergleichen Sie den durchschnittlichen Strompreis im Gebiet Deutschland/Luxemburg an Werktagen (Montag - Freitag) mit dem durchschnittlichen Strompreis am Wochenende.**

::: {#tip-Durchschnittspreis .callout-tip collapse="true"}
## Musterlösung Strompreisvergleich

``` {python}
## Zugriff mit .dt für pd.Series
# Werktage und Wochenende unterscheiden
werktags = preise['Datum von'].dt.weekday.isin(list(range(0, 5)))
wochenende = preise['Datum von'].dt.weekday.isin(list(range(5, 7)))

print(werktags.head())
print(wochenende.head())

# Preise vergleichen
preis_werktags = preise.loc[werktags, 'Deutschland/Luxemburg [€/MWh] Originalauflösungen'].mean()
preis_wochenende = preise.loc[wochenende, 'Deutschland/Luxemburg [€/MWh] Originalauflösungen'].mean()

print(f"\nDurchschnittspreis werktags: {preis_werktags:.2f} [€/MWh]\nDurchschnittspreis am Wochenende: {preis_wochenende:.2f} [€/MWh]")
```

:::

## Übungen: Zeitreihen einlesen

Und zwar... mit NumPy oder mit Pandas

<https://numpy.org/doc/stable/reference/arrays.datetime.html>

#### Etwas einfaches: Datumsformate einlesen
Datensatz: SMARD-Daten 2023 im englischen Format

#### Fix me: Das Datumsformat aus der Hölle
Datensatz: Shiller-file 'shiller_data.xls'

#### String-Manipulation
**Ergänzen: Übung mit string-Formating im österreichischen Datensatz aus dem a-Energiedatenanalyse.**



### Zeitzonen in NumPy und Pandas

#### Zeitzonen mit NumPy verwalten
--> NumPy unterstützt das gar nicht, es reicht zu zeigen, wie es eingelesen wird.
**hier bräuchten wir britische, portugisische oder osteuropäische Daten, um einen Zeitversatz zu demonstrieren**

`datetime64[ns, tz]`

#### Zeitzonen mit Pandas verwalten
http://pandas.pydata.org/pandas-docs/dev/user_guide/timeseries.html#time-zone-handling 


datetime and time objects have an optional time zone information attribute, tzinfo, that can be set to an instance of a subclass of the abstract tzinfo class. (https://docs.python.org/3/library/datetime.html#)
**Das kann doch nicht so kompliziert sein?! Die Dokumentation des Moduls ist auch interessant. Es löst einige Probleme mit dem Ende der Sommerzeitumstellung. <https://pythonhosted.org/pytz/>**


::: {.border}
#### Grobe Planung a-Analyse von Zeitdaten

  - pandas, matplotlib, scikit-learn?

  - Datenvorbereitung und -bereinigung: Umgang mit fehlenden Werten und Ausreißern

  - Trends und Saisonalität

  - Autokorrelation?

  - Modellierung und Vorhersagen

  - Evaluierung von Vorhersagen

::::

Welches Datum ist heute? Das hängt vom Kalender ab: Gregorianischer Kalender in Europa, jüdischer Kalender in Israel,  islamischer Kalender, Suriyakati-Kalender in Thailand (hatte ich in der Diss), Astronomische Zählweise (NumPy)

Unterschied NumPy und Python wird hier erklärt: https://numpy.org/doc/stable/reference/arrays.datetime.html

naive und aware time (aware kennt Zeitzonen, naive nicht): https://numpy.org/doc/stable/reference/arrays.datetime.html#datetime64-conventions-and-assumptions

**Fehlersuche und -bereinigung: Kalender prüfen**

**Mit Pandas und/oder NumPy SMART-Datensätze einlesen, die gibt es in Deutsch und Englisch mit entsprechendem Datumsformat - siehe Material**

## fehlende Werte in Zeitreihen
NumPy und Pandas unterstützen `NaT` für `np.datetime64`, `np.timedelta64`

  - NumPy: <https://numpy.org/doc/stable/reference/arrays.datetime.html>  
  `NAT`, in any combination of lowercase/uppercase letters, for a “Not A Time” 
  
  - Pandas: <https://pandas.pydata.org/docs/user_guide/missing_data.html>

::: {#wrn-logicNaT .callout-warning appearance="simple" collapse="false"}
## Achtung Logik!

Die logische Abfrage fehlender Werte unterscheidet sich für `None`, `np.nan` und `pd.NA` und `pd.NaT`. 
``` {python}
bool_values = [None, float('NaN'), pd.NA, pd.NaT]

for element in bool_values:
  try:
    bool_value = bool(element)
  except TypeError as error:
      print(error)
  else:
    print("Wahrheitswert von", element, "ist", bool_value)
```

Dies gilt auch für die logische Identität.
``` {python}
for element in bool_values:
  try:
    result = element == element
  except TypeError as error:
      print(error)
  else:
    print("Identität von", element, "ist", result)
```

:::


# Zugriff auf mehrere lokale Dateien: Modul glob
Das Modul glob

# Datensätze organisieren
In diesem Abschnitt werden typische Herausforderungen beim Einlesen strukturierter Datensätze behandelt und Werkzeuge aus den Modulen NumPy und Pandas vorgestellen, um Probleme zu identifizieren und zu beheben. Dazu wird einführend mit tidy data ein grundlegendes Konzept zur Organisation von Datensätzen vorgestellt.

## Tidy data {#sec-tidydata}
**Konzept als Einführung gedacht: Was ist überhaupt das Ziel des Einlesens? (ist aber inkompatibel mit dem Multiindex in Python [und den fehlenden Spaltenbeschriftungen in Numpy])**

::: {.border layout="[5, 90, 5]"}

&nbsp;

“Tidy datasets are all alike, but every messy dataset is messy in its own way.” [@R-for-Data-Science, Kapitel 5 Data tidying]

&nbsp;

:::

Tidy data ist ein System von Hadley Wickham, das dabei hilft, Datensätze in ein aufgeräumtes (tidy) Format zu bringen. Das Aufräumen von Datensätzen ist eine vorbereitende Tätigkeit mit dem Ziel, während der eigentlichen Datenanlyse möglichst wenig Zeit für das Umformen von Datenstrukturen aufwenden zu müssen. Dadurch soll ein größerer Fokus auf den inhaltlichen Aspekt der Datenanalyse ermöglicht werden. [@R-for-Data-Science, Kapitel 5 Data tidying]

::: {#imp-tidy-data .callout-important}
## tidy data

:::: {.border layout="[[5, 90, 5], [1]]"}

&nbsp;

::::: {}
"Das System tidy data besteht aus drei Regeln:

1. Jede Variable ist eine Spalte; jede Spalte ist eine Variabe.

2. Jede Beobachtung ist eine Zeile; jede Zeile ist eine Beobachtung.

3. Jeder Wert ist eine Zelle; jede Zelle ist ein einzelner Wert."
:::::

&nbsp;

[@R-for-Data-Science, Kapitel 5 Data tidying]
::::
:::

Tidy data bezieht sich auf zweidimensionale Datensätze, bietet aber auch darüber hinaus eine Orientierung, um unterschiedlich aufgebaute Datensätze strukturiert einzulesen und für die Datenanalyse vorzubereiten. Tidy data ist kein strikt zu befolgendes Regelwerk. Es ist völlig in Ordnung, eine andere Struktur zu wählen, Wenn die Datenanalyse damit leichter durchgeführt werden kann. 



**Hinweis: `dtype=object` erscheint immer, wenn der Datentyp nicht zugeordnet werden kann. type(object) ist etwas anderes als object.dtype. Erstes bestimmt den Objekttyp, zum Beispiel Liste oder Numpy-Array. Zweiteres bestimmt den Datentyp (Ganzzahl, String). Ich glaube, `dtype=object` ist eine Liste von Zeigern auf Objekte im Speicher. Dazu habe ich aber nur eine [Erklärung auf Stackoverflow](https://stackoverflow.com/a/29877845) gefunden, aber nichts in der Dokumentation.**

# Räumliche Daten
netCDF mit eigenem Namensschema: dimensions (Name, Datentyp und Länge der Variablen), data variables (die eigentlichen Datensätze), attributes (Informationen über die Daten).

# Strategien der Fehlersuche und Bereinigung

::: {.border layout="[[5, 90, 5], [1], [1]]"}

&nbsp;

"everybody I know has war stories about cleaning up lousy datasets"  
Nicholas J. Cox

&nbsp;

&nbsp;

Cox, Nicholas J. 2004: Exploratory Data Mining and Data Cleaning. Book Review 9. In: Journal of Statistical Software 2004, Volume 11. <https://www.jstatsoft.org/article/view/v011b09/30>

:::

## Werte plausibilisieren
1. zulässigen Wertebereich prüfen

2. zulässige Werte auf Konsistenz mit fachlicher, ggf. Alltagserfahrung prüfen
Ein Beispiel für Alltagserfahrung: <https://www.youtube.com/watch?v=FcxiSwZcPvw> (Anzahl Schuhe usw.)

# Spezialformate {#sec-spezialformate}

## HDF, netCDF
https://stackoverflow.com/questions/28170623/how-to-read-hdf5-files-in-python

## Maskierte Arrays
Maskierte Arrays (masked arrays) werden durch das Modul `numpy.ma` bereitgestellt. Maskierte Arrays erlauben es, Werte als ungültig oder fehlend zu markieren, ohne diese zu ersetzen oder zu löschen. Ein maskiertes Array besteht aus drei Elementen. Dies sind erstens ein normales NumPy-Array und zweitens eine Maske. Die Maske hat entweder den Wert `numpy.ma.nomask`, wenn kein Wert ungültig ist oder fehlt. Andernfalls besteht die Maske aus einem Array mit Wahrheitswerten für jedes Element des NumPy-Arrays, ob ein ungültiger/fehlender Wert `True` vorliegt oder nicht `False`. Alle Elemente des NumPy-Arrays, die in der zugehörigen Maske den Wahrheitswert `True` haben, werden im maskierten Array durch eine Zeichenkette ersetzt. Standardmäßig ist dies die Zeichenkette`numpy.ma.masked_print_option = '--'`, die mit dem genannten Argument geändert werden kann. Über die Attribute `.data` und `mask` kann auf das zugrundeliegende NumPy-Array und die Maske zugegriffen werden.

**ergänzen: masked_array ist ein Alias von MaskedArray; 16 weitere Methoden ein maskiertes Array zu erzeugen unter: <https://numpy.org/doc/stable/reference/maskedarray.generic.html#constructing-masked-arrays> - einige davon sind wirklich praktisch**

``` {python}
import numpy.ma as ma

print(f"NumPy-Array:\t\t{np_array_with_none}") 

maskiertes_array = ma.masked_array(data = np_array_with_none, mask = [0, 0, 1, 1])
print(f"maskiertes Array:\t{maskiertes_array}")

print(f"Daten:\t\t\t\t{maskiertes_array.data}")

print(f"Maske:\t\t\t\t{maskiertes_array.mask}")
```

Das dritte Element eines maskierten Arrays ist der Füllwert, der beim Anlegen des maskierten Arrays mit dem Argument `fill_value` übergeben werden kann. Der Füllwert wird zunächst nur gespeichert und kann später verwendet werden, um ungültige bzw. fehlende Werte zu ersetzen. Der Füllwert wird mit der `Methode.filled()` aktiviert. Dann wird die Maske auf den Wert `numpy.ma.nomask` gesetzt und ein normales NumPy-Array ausgegeben. **Testen: in Pandas fill_value is not stored in the Int64 object.**

``` {python}
# Anlegen eines maskierten Arrays mit einem Füllwert
fill_value_array = ma.masked_array(data = daten_ohne_fehlende_werte[0:4], mask = [0, 0, 1, 1], fill_value = 42) # np_array_with_none

print(f"In der Ausgabe wird ein normales maskiertes Array zurückgegeben:\n{fill_value_array}\n")

print(f"Der Füllwert wird mit der Methode numpy.ma.filled() aktiviert:\n{fill_value_array.filled()}\n")

fill_value_array.fill_value = 1.5
print(f"Der Füllwert kann mit np.ma.fill_value = wert geändert werden:\n{fill_value_array.filled()}\n")

fill_value_array.fill_value = None
print(f"Der Füllwert None bewirkt den Rückgriff auf einen datentypabhängigen Standardwert:\n{fill_value_array.filled()}\n")

print(f"Das maskierte Array ist weiterhin vorhanden:\n{fill_value_array}\n")
```

Der Standardwert des Arguments `fill_value` ist `None`, mit dem beim Aufrufen der `Methode.filled()` abhängig vom Datentyp ein Standardwert eingesetzt wird.

::: {.border}
``` {python}
for dt in [np.int32, np.int64, np.float64, np.complex128, np.string_, np.bool_]:

  print(dt, "\t\t", np.ma.array([0, 1], dtype = dt).get_fill_value())
```

Quelle: <https://numpy.org/doc/stable/reference/maskedarray.baseclass.html#numpy.ma.MaskedArray.fill_value>
:::

Problemtisch ist die Übergabe des Füllwerts `None`, wenn das initale NumPy-Array None enthält. 

::: {#wrn-fillvalueandnone .callout-warning appearance="simple" collapse="true"}
## Füllwert bei initialem NumPy-Array mit None


``` {python}
# Anlegen eines maskierten Arrays mit Füllwert, initiales NumPy-Array enthält None
fill_value_array = ma.masked_array(data = np_array_with_none, mask = [0, 0, 1, 1], fill_value = 42)

print(f"In der Ausgabe wird ein normales maskiertes Array zurückgegeben:\n{fill_value_array}\n")

print(f"Der Füllwert wird mit der Methode numpy.ma.filled() aktiviert:\n{fill_value_array.filled()}\n")

fill_value_array.fill_value = 1.5
print(f"Der Füllwert kann mit np.ma.fill_value = wert geändert werden:\n{fill_value_array.filled()}\n")

fill_value_array.fill_value = None
print(f"Der Füllwert None bewirkt den Rückgriff auf einen datentypabhängigen Standardwert:\n{fill_value_array.filled()}\n")

print(f"Das maskierte Array ist weiterhin vorhanden:\n{fill_value_array}\n")

```

:::

**Fehlersuche und -bereinigung: None ist in NumPy problematisch und sollte manuell kontrolliert und entfernt werden**

**Fehlersuche und -bereinigung: Dokumentation lesen, Funktionen können unerwartetes Verhalten zeigen. Arbeiten Sie mit Testdaten, die den einzulesenden Datensatz möglichst gut repräsentieren und arbeiten Sie schrittweise an einer Lösung. Wenden Sie die Lösung auf den echten Datensatz an und vergleichen das Ergbnis zu dem Ergebnis der Testdaten.**


**Operationen mit fill_value(): <https://numpy.org/doc/stable/reference/routines.ma.html#filling-a-masked-array>**

### Operationen mit maskierten Arrays
Wie rechnet man jetzt damit? Der Platzhalter '--' ist vom NoneType, damit kann man nicht rechnen, wenigstens nicht mit mehreren Arrays. Siehe:  
<https://numpy.org/doc/stable/reference/maskedarray.generic.html#operations-on-masked-arrays>

``` {python}

print(maskiertes_array.sum())

print(len(maskiertes_array))

print(np_array_with_nan, np_array_with_nan.dtype)

print(maskiertes_array, maskiertes_array.dtype)

try:
  result = np_array_with_nan + maskiertes_array
except TypeError as error:
  print("\nDie Eingabe führt zu der Fehlermeldung:\n", error)
else:
  print(result)

try:
  result = np_array_with_nan + maskiertes_array.data
except TypeError as error:
  print("\nDie Eingabe führt zu der Fehlermeldung:\n", error)
else:
  print(result)

try:
  result = np.ma.masked_array(np_array_with_nan) + maskiertes_array.data
except TypeError as error:
  print("\nDie Eingabe führt zu der Fehlermeldung:\n", error)
else:
  print(result)

```

The result of a unary ufunc is masked wherever the input is masked ... or  wherever the corresponding input fall outside the validity domain. (siehe: [Dokumentation](https://numpy.org/doc/stable/reference/maskedarray.generic.html#operations-on-masked-arrays))

**In der Doku steht eine Warnung, dass man sich nicht darauf verlassen kann, dass maskierte Werte nicht von Operationen manipuliert werden.**

::: {.border layout="[[5, 90, 5], [5, 90, 5], [1]]"}

&nbsp;

Arithmetic and comparison operations are supported by masked arrays. As much as possible, invalid entries of a masked array are not processed, meaning that the corresponding `data` entries *should* be the same before and after the operation.

&nbsp;

&nbsp;

:::: {.callout-warning}
We need to stress that this behavior may not be systematic, that masked data may be affected by the operation in some cases and therefore users should not rely on this data remaining unchanged.
::::

&nbsp;

<https://numpy.org/doc/stable/reference/maskedarray.generic.html#operations-on-masked-arrays>

:::

**Unklar ist, welche Operationen nicht verlässlich funktionieren.**

Das Prinzip: Das Modul `numpy.ma` implementiert die meisten NumPy-Funktionen. Funktionen, die nur einen bestimmten Wertebereich als Eingabe akzeptieren, geben den Wert `masked` zurück, wenn Werte außerhalb des gültigen Bereichs übergeben werden. Ein Beispiel ist die  `ma.log()`.

``` {python}

ma.log([1, 2, 3, -1])
``` 

In der Ausgabe wird der 
Man kann auch Werte maskieren, das ist aber abgesehen von Integer nicht exakt. Für Fließkommazahlen werden auch minimal größere oder kleinere Werte maskiert. Siehe: <https://numpy.org/doc/stable/reference/generated/numpy.ma.masked_values.html>
Fehlende Werte in NumPy maskieren
<https://numpy.org/doc/stable/reference/maskedarray.html>

... können auch mit genfromtxt erzeugt werden
`usemask`
We may also want to keep track of the occurrence of missing data by constructing a boolean mask, with True entries where data was missing and False otherwise. To do that, we just have to set the optional argument usemask to True (the default is False). The output array will then be a MaskedArray.

**Rückkehr des fill_value nach <https://github.com/numpy/numpy/issues/20850#issuecomment-2077856842>**

```
>>> arr1 = np.ma.masked_equal(arr, value=0)
>>> arr1.fill_value
0.0
>>> arr2 = np.ma.masked_less_equal(arr, value=0)
>>> arr2.fill_value
1e+20
```

### Unmasking and hard masks
<https://numpy.org/doc/stable/reference/maskedarray.generic.html#unmasking-an-entry>

Wie hier <https://github.com/numpy/numpy/issues/20850> erwähnt, nutzt keine der genannten Methoden fill_value und das Verhalten sei inkonstistent: **testen, das Verhalten von fill_value = None ist seltsam, aber works as designed**

  - ma.MaskedArray.filled(fill_value=None) uses a.fill_value when fill_value is None
  
  - a.mask = ma.unmasked ignores a.fill_value
  
  - ma.fix_invalid(a, mask=False, copy=True, fill_value=None) uses a.fill_value when fill_value is None
  
  - ma.MaskedArray.tolist(fill_value=None) ignores a.fill_value
  
  - ma.MaskedArray.tobytes(fill_value=None, order='C') uses a.fill_value when fill_value is None
  
  - ma.min/ma.max/ma.argmin/ma.argmax ignore a.fill_value

# Das Wichtigste (vielleicht als Video)

# Lernzielkontrolle

  * Kompetenzquiz (ggf. aufklappbarer Callout Block, Textverweis für PDF, polierte Lösungen evntl. via Lumi später entscheiden)

  * Übungsaufgaben (kleine Projekte)

* Prüfungsaufgaben (ohne Lösungen)
